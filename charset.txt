‚ñ† OR \0 OR \0 pictorial (‚êÄ) // 0x25a0 // 000 // (black square) end program
\1 //  // RESERVED
\2 //  // RESERVED
\3 //  // RESERVED
\4 //  // RESERVED
\5 OR \5 pictorial (‚êÖ) // // 005 // (enquiry) TODO
\6 OR \6 pictorial (‚êÜ) //  // (acknowledge) TODO
üîî OR \7 OR \7 pictorial (‚êá) // 0x1f514 // (bell) make a beep
\8 OR \8 pictorial (‚êà) //  // (backspace) TODO
\t OR \t pictorial (‚êâ) //  // (h-tab) move to random h-tab in same row
¬∂ OR \n OR \n pictorial (‚êä‚ê§) //  // (line feed) row delimiter
\11 OR \11 pictorial (‚êã) //  // (v-tab) move to random v-tab in same column
\12 OR \12 pictorial (‚êå) //  // (form feed) TODO
\r OR \r pictorial (‚êç) //  // (carriage return) TODO
‚çì // 0x2353 // (apl quad up caret) start up
‚çÑ // 0x2344 // (apl more than quad) start right
‚çå // 0x234C // (apl quad down caret) start down
‚çÉ // 0x2343 // (apl less than quad) start left
‚å∫ // 0x233A // (apl quad diamond) start random
Ôπá // 0xFE47 // (top bracket) conditional goto
Ôπà // 0xFE48 // (bottom bracket) conditional goto
\21 OR \21 pictorial (‚êï) //  // (negative ACK) TODO
Ô∏µ // 0xFE35 // (top parenthesis) always loop
Ô∏∂ // 0xFE36 // (bottom parenthesis) always loop
\24 OR \24 pictorial (‚êò) //  // (cancel) TODO
Ô∏∑ // 0xFE37 // (top brace) conditional loop
Ô∏∏ // 0xFE38 // (bottom brace) contidional loop
\27 OR \27 pictorial (‚êõ) //  // (escape) TODO
Ô∏ø // 0xFE3F // (top angle) always goto
‚ü© OR „Äâ OR ‚å™ // 0x27E9 0x3009 0x232A // (right angle) always goto
ÔπÄ // 0xFE40 // (bottom angle) always goto
‚ü® OR „Äà OR ‚å© // 0x27E8 0x3008 0x2329 // (left angle) always goto
  //  // no-op
! //  // print once
" //  // literal quote
# //  // hash
$ //  // get environment variable
% //  // modulo division
& //  // concatenate
' //  // start and end string
( //  // always loop
) //  // always loop
* //  // dot product
+ //  // addition
, //  // separate into singleton
- //  // negation in literal
. //  // decimal separator
/ //  // reflection
0 //  // zero
1 //  // one
2 //  // two
3 //  // three
4 //  // four
5 //  // five
6 //  // six
7 //  // seven
8 //  // eight
9 //  // nine
: //  // fraction separator
; //  // singleton of entire left
< //  // less-than (vectorizes)
= //  // equal to (vectorizes)
> //  // greater-than (vectorizes)
? //  // read once
@ //  // item at index (maps)
A //  // uppercase alphabet (constant)
B //  // from binary
C //  // arc-cosine (maps)
D //  // contains duplicates
E //  // natural logarithm
F //  // is a palindrome
G //  // get-where [filter]
H //  // tail
I //  // imaginary part (maps)
J //  // real part (maps)
K //  // drop
L //  // is a list
M //  // maximum
N //  // is a number
O //  // is sorted
P //  // is a prime (maps)
Q //  // is a rational number (maps)
R //  // repeats [count occurrences] (does not vectorize)
S //  // arc-sine (maps)
T //  // arc-tangent (maps)
U //  // uniform [expand stacks to unify shape]
V //  // eval
W //  // drop while
X //  // diagonalize with
Y //  // join on right
Z //  // is an integer (maps)
[ //  // conditional goto
\ //  // reflection
] //  // conditional goto
^ //  // power (vectorizes, zips)
_ //  // flatten
` //  // push literal newline
a //  // lowercase alphabet (constant)
b //  // to binary
c //  // cosine (maps)
d //  // remove duplicates
e //  // eulers constant (constant)
f //  // flip [reverse]
g //  // group by equality
h //  // head
i //  // imaginary constant (constant)
j //  // TODO
k //  // keep
l //  // length
m //  // minimum
n //  // random number
o //  // sort
p //  // all primes (constant)
q //  // absolute value
r //  // repeat
s //  // sine (maps)
t //  // tangent (maps)
u //  // uniform [join stacks to unify shape]
v //  // convert to string [repr]
w //  // take while
x //  // cross product
y //  // split on right
z //  // round (maps)
{ //  // conditional loop
| //  // reflection
} //  // conditonal loop
~ //  // negation (maps)
\127 OR \127 pictorial (‚ê°) //  // (delete) clear console
‚Äº // 0x203C // print a bunch
‚Åá // 0x2047 // input till null
‚ÄΩ // 0x203D // execute system command, maybe return file descriptor for pipe to read?
¬° // 0x00A1 // write file
¬ø // 0x00BF // read file
‚éï // 0x2395 // (apl quad) restart program from last start location
‚ç∞ // 0x2370 // (apl quad question mark) restart program from random start location
‚Äî OR ‚Äí OR ‚Äì OR ‚Äï // 0x2012 0x2013 0x2014 0x2015 // (em-dash) reflection
‚Ü∫ OR ‚Ü∂ // 0x21BA  // (anticlockwise arrow) turn anticlockwise
‚Üª OR ‚Ü∑ // 0x21BB // (clockwise arrow) turn clockwise
‚ñ≥ // 0x25B3 // (white up triangle) conditional up
‚ñ∑ // 0x25B7 // (white right triangle) conditional right
‚ñΩ // 0x25BD // (white down triangle) conditional down
‚óÅ // 0x25C1 // (white left triangle) conditional left
‚óá // 0x25C7 // (white diamond) conditional any direction
‚ñ≤ // 0x25B2 // (black up triangle) move up
‚ñ∂ // 0x25B6 // (black right triangle) move right
‚ñº // 0x25BC // (black down triangle) move down
‚óÄ // 0x25C0 // (black left triangle) move left
‚óÜ // 0x25C6 // (black diamond) random direction
‚óø // 0x25FF // (SE white triangle) conditional bounce SE
‚ó∫ // 0x25FA // (SW white triangle) conditional bounce SW
‚ó∏ // 0x25F8 // (NW white triangle) conditional bounce NW
‚óπ // 0x25F9 // (NE white triangle) conditional bounce NE
‚ó¢ // 0x25E2 // (SE black triangle) bounce south east
‚ó£ // 0x25E3 // (SW black triangle) bounce south west
‚ó§ // 0x25E4 // (NW black triangle) bounce north west
‚ó• // 0x25E5 // (NE black triangle) bounce north east
‚óã // 0x25CC // (white circle) conditional jump over next instruction
‚óè // 0x25CF // (black circle) jump over next instruction
‚Üê // 0x2190 // (left arrow) move top of right stack to top of left stack
‚Üí // 0x2192 // (right arrow) move top of left stack to top of right stack
‚Üî // 0x2194 // (left-right arrow) swap top of stacks
‚áê // 0x21D0 // (double left arrow) prepend right stack to left stack
‚áí // 0x21D2 // (double right arrow) prepend left stack to right stack
‚áî // 0x21D4 // (left-right double arrow) swap left and right stacks
‚Üò // 0x2198 // store left
‚Üñ // 0x2196 // recall left
‚Üô // 0x2199 // store right
‚Üó // 0x2197 // recall right
‚àÖ // 0x2205 // (empty set) push empty list
·∫Ä // 0x1E80 // (capital w with grave) is left stack empty
·∫Å // 0x1E81 // (lower w with grave) pop left stack
·∫Ç // 0x1E82 // (capital w with acute) is right stack empty
·∫É // 0x1E83 // (lower w with acute) pop right stack
‚àû // 0x221E // literal infinity
‚àù // 0x221D // is a non-finite number, and not NaN (maps)
‚àí // 0x2212 // subtract
√ó // 0x00D7 // multiply (vectorizes)
√∑ // 0x00F7 // divide (vectorizes)
‚Öü // 0x215F // reciprocal (maps)
‚àö // 0x221A // square root (maps)
‚àë // 0x2211 // sum
‚àè // 0x220F // product
≈æ // 0x017E // floor 
·∫ë // 0x1E91 // ceiling
ƒ≥ // 0x0133 // join a complex number
ƒ≤ // 0x0132 // split a complex number
‚âÇ // 0x2242 // conjugate
¬¨ // 0x00AC // not (maps)
¬´ // 0x00AB // (left angle quotes) left shift (vectorizes, zips)
¬ª // 0x00BB // (right angle quotes) right shift (vectorizes, zips)
‚à® // 0x2228 // or (vectorizes)
‚àÉ // 0x2203 // any
‚àß // 0x2227 // and (vectorizes)
‚àÄ // 0x2200 // all
‚äª // 0x22BB // xor (vectorizes)
‚ä® // 0x22A8 // coalesce to truthy/falsey (maps)
‚ä≠ // 0x22AD // logical negation (maps)
‚âà // 0x2248 // (approx equal) within distance one of
‚â† // 0x2260 // not equals (vectorizes)
‚â§ // 0x2264 // less or equals (vectorizes)
‚â• // 0x2265 // greater or equals (vectorizes)
‚â° // 0x2261 // (identical to) identical to
‚â¢ // 0x2262 // (not identical to) not identical to
‚à© // 0x2229 // intersection
‚à™ // 0x222A // union
‚àÜ // 0x2206 // symmetric difference
‚àã // 0x220B // contains as member
‚äÉ // 0x2283 // is superset of
‚à´ // 0x222B // range to
‚à¨ // 0x222C // range from step
‚à≠ // 0x222D // range from mult
‚Ñô // 0x2119 // permutations
‚ÑÇ // 0x2102 // combinations
‚àá // 0x2207 // levenshtein distance
ƒã // 0x010B // cycle
·πô // 0x1E59 // rotate
‚âê // 0x2250 // limit
·∏ü // 0x1E1F // flip [reverse] (recurses)
‚±¶ // 0x2C66 // transpose
·πò // 0x1E58 // repeats [count occurrences] (vectorizes)
œÄ // 0x03C0 // pi (constant)
√Ö // 0x00C5 // (capital a with ring) convert to radians
√• // 0x00E5 // (lower a with ring) convert to degrees
·∏Ç // 0x1E02 // bytes to UTF8
·∏É // 0x1E03 // UTF8 to bytes
≈ù // 0x015D // uncompress a string
≈° // 0x0161 // compress a string
ƒâ // 0x0109 // capitalize
ƒç // 0x010D // lower case
·π´ // 0x1E6B // title case (maps)
»¶ // 0x0226 // isAlpha
√Ñ // 0x00C4 // isLetter
·πÄ // 0x1E40 // isMark
·πÑ // 0x1E44 // isNumber
·πñ // 0x1E56 // isPunctuation
·π† // 0x1E60 // isSymbol
·∫Ñ // 0x1E84 // isSeparator
ƒå // 0x010C // isLower
ƒà // 0x0108 // isUpper
·∫Ü // 0x1E86 // isSpace
ƒä // 0x010A // isControl
»ª // 0x023B // isPrint
·∏ä // 0x1E0A // isDigit
·∫ó // 0x1E97 // title case (does not map)
·π™ // 0x1E6A // is title case
·πü // 0x1E5F // duplicate right stack top
·∏ª // 0x1E3B // duplicate left stack top
·∫è // 0x1E8F // TODO (something with slicing)
  //  // 
  //  // 
  //  // 
  //  // 
  //  // 
  //  // 
  //  // 
‚Ñ¢ // 0x2122 // get the time