‚ñ† OR \0 OR \0 pictorial (‚êÄ) // (black square) end program
\1 // RESERVED
\2 // RESERVED
\3 // RESERVED
\4 // RESERVED
\5 OR \5 pictorial (‚êÖ) // (enquiry) TODO
\6 OR \6 pictorial (‚êÜ) // (acknowledge) TODO
üîî OR \7 OR \7 pictorial (‚êá) // (bell) make a beep
\8 OR \8 pictorial (‚êà) // (backspace) TODO
\t OR \t pictorial (‚êâ) // (h-tab) move to random h-tab in same row
¬∂ OR \n OR \n pictorial (‚êä‚ê§) // (line feed) row delimiter
\11 OR \11 pictorial (‚êã) // (v-tab) move to random v-tab in same column
\12 OR \12 pictorial (‚êå) // (form feed) TODO
\r OR \r pictorial (‚êç) // (carriage return) TODO
‚çÉ // (apl less than quad) start left
‚çÑ // (apl more than quad) start right
‚çå // (apl quad down caret) start down
‚çì // (apl quad up caret) start up
‚å∫ // (apl quad diamond) start random
Ôπá // (top bracket) conditional goto
Ôπà // (bottom bracket) conditional goto
\21 OR \21 pictorial (‚êï) // (negative ACK) TODO
Ô∏µ // (top parenthesis) always loop
Ô∏∂ // (bottom parenthesis) always loop
\24 OR \24 pictorial (‚êò) // (cancel) TODO
Ô∏∑ // (top brace) conditional loop
Ô∏∏ // (bottom brace) contidional loop
\27 OR \27 pictorial (‚êõ) // (escape) TODO
‚ü® OR „Äà OR ‚å© // (left angle) always goto
‚ü© OR „Äâ OR ‚å™ // (right angle) always goto
Ô∏ø // (top angle) always goto
ÔπÄ // (bottom angle) always goto
  // no-op
! // TODO ?? print to console
" // literal quote
# // random number
$ // get environment variable
% // modulo division
& // concatenate
' // start and end string
( // always loop
) // always loop
* // dot product
+ // addition
, // separate into singleton
- // subtraction
. // decimal separator
/ // reflection
0 // zero
1 // one
2 // two
3 // three
4 // four
5 // five
6 // six
7 // seven
8 // eight
9 // nine
: // fraction separator
; // singleton of entire left
< // less-than (vectorizes)
= // equal to (vectorizes)
> // greater-than (vectorizes)
? // TODO ?? read from console
@ // item at index (maps)
A // uppercase alphabet (constant)
B // from binary
C // arc-cosine (maps)
D // contains duplicates
E // natural logarithm
F // TODO
G // TODO
H // TODO
I // imaginary part (maps)
J // real part (maps)
K // TODO
L // is a list
M // maximum
N // TODO
O // is sorted
P // is a prime (maps)
Q // TODO
R // is a real number (maps)
S // arc-sine (maps)
T // arc-tangent (maps)
U // is a palindrome
V // TODO
W // is either stack empty
X // diagonalize with
Y // split on right
Z // is an integer (maps)
[ // conditional goto
\ // reflection
] // conditional goto
^ // power (vectorizes, zips)
_ // flatten
` // TODO
a // lowercase alphabet (constant)
b // to binary
c // cosine (maps)
d // remove duplicates
e // eulers constant (constant)
f // TODO
g // group by equality
h // TODO
i // imaginary constant (constant)
j // split a complex number (maps)
k // TODO
l // length
m // minimum
n // numbers from zero to left
o // sort
p // all primes (constant)
q // TODO
r // round (maps)
s // sine (maps)
t // tangent (maps)
u // upend [reverse]
v // TODO
w // wipe both stacks
x // cross product
y // join on right
z // entier floor (maps)
{ // conditional loop
| // reflection
} // conditonal loop
~ // negation (maps)
\127 OR \127 pictorial (‚ê°) // (delete) clear console
√ó // multiply (vectorizes)
√∑ // divide (vectorizes)
‚àö // square root (maps)
‚Öü // reciprocal (maps)
‚àû // is a non-finite number, and not NaN (maps)
œÄ // pi (constant)
‚àÖ // (empty set) push empty list
‚àè // product
‚àë // sum
¬´ // (left angle quotes) left shift (vectorizes, zips)
¬ª // (right angle quotes) right shift (vectorizes, zips)
‚à© // intersection
‚à™ // union
‚àÜ // symmetric difference
‚Ñò // power set (subsequences)
‚à® // or (folds)
‚àÉ // any
‚àß // and (folds)
‚àÄ // all
‚äª // xor (folds)
¬¨ // not (maps)
‚ä® // coalesce to truthy/falsey (maps)
‚ä≠ // logical negation (maps)
‚â† // not equals (vectorizes)
‚àã // contains as member
‚äÉ // is superset of
‚â§ // less or equals (vectorizes)
‚â• // greater or equals (vectorizes)
‚âà // (approx equal) within distance one of
‚â° // (identical to) identical to
‚â¢ // (not identical to) not identical to
‚Üê // (left arrow) move top of right stack to top of left stack
‚Üí // (right arrow) move top of left stack to top of right stack
‚Üî // (left-right arrow) swap top of stacks
‚áê // (double left arrow) prepend right stack to left stack
‚áí // (double right arrow) prepend left stack to right stack
‚áî // (left-right double arrow) swap left and right stacks
‚Äî OR ‚Äí OR ‚Äì OR ‚Äï// (em-dash) reflection
‚Ü∫ OR ‚Ü∂ // (anticlockwise arrow) turn anticlockwise
‚Üª OR ‚Ü∑ // (clockwise arrow) turn clockwise
‚ñ≥ // (white up triangle) conditional up
‚ñ∑ // (white right triangle) conditional right
‚ñΩ // (white down triangle) conditional down
‚óÅ // (white left triangle) conditional left
‚óá // (white diamond) conditional any direction
‚ó¢ // (SE black triangle) bounce south east
‚ó£ // (SW black triangle) bounce south west
‚ó§ // (NW black triangle) bounce north west
‚ó• // (NE black triangle) bounce north east
‚ó∏ // (NW white triangle) conditional bounce NW
‚óπ // (NE white triangle) conditional bounce NE
‚ó∫ // (SW white triangle) conditional bounce SW
‚óø // (SE white triangle) conditional bounce SE
‚óè // (black circle) jump over next instruction
‚óã // (white circle) conditional jump over next instruction
‚ñ≤ // (black up triangle) move up
‚ñ∂ // (black right triangle) move right
‚ñº // (black down triangle) move down
‚óÄ // (black left triangle) move left
‚óÜ // (black diamond) random direction
‚éï // (apl quad) restart program from last start location
‚ç∞ // (apl quad question mark) restart program from random start location
·∫Ä // (capital w with grave) is left stack empty
·∫Å // (lower w with grave) wipe left stack
·∫Ç // (capital w with acute) is right stack empty
·∫É // (lower w with acute) wipe right stack
√Ö // (capital a with ring) convert to radians
√• // (lower a with ring) convert to degrees
·πØ // (lower t with stroke) transpose