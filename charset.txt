‚ñ† OR \0 OR \0 pictorial (‚êÄ) // 0x25a0 // (black square) end program
\1 // RESERVED
\2 // RESERVED
\3 // RESERVED
\4 // RESERVED
\5 OR \5 pictorial (‚êÖ) // (enquiry) TODO
\6 OR \6 pictorial (‚êÜ) // (acknowledge) TODO
üîî OR \7 OR \7 pictorial (‚êá) // 0x1f514 // (bell) make a beep
\8 OR \8 pictorial (‚êà) // (backspace) TODO
\t OR \t pictorial (‚êâ) // (h-tab) move to random h-tab in same row
¬∂ OR \n OR \n pictorial (‚êä‚ê§) // (line feed) row delimiter
\11 OR \11 pictorial (‚êã) // (v-tab) move to random v-tab in same column
\12 OR \12 pictorial (‚êå) // (form feed) TODO
\r OR \r pictorial (‚êç) // (carriage return) TODO
‚çÉ // 0x2343 // (apl less than quad) start left
‚çÑ // 0x2344 // (apl more than quad) start right
‚çå // 0x234C // (apl quad down caret) start down
‚çì // 0x2353 // (apl quad up caret) start up
‚å∫ // 0x233A // (apl quad diamond) start random
Ôπá // 0xFE47 // (top bracket) conditional goto
Ôπà // 0xFE48 // (bottom bracket) conditional goto
\21 OR \21 pictorial (‚êï) // (negative ACK) TODO
Ô∏µ // 0xFE35 // (top parenthesis) always loop
Ô∏∂ // 0xFE36 // (bottom parenthesis) always loop
\24 OR \24 pictorial (‚êò) // (cancel) TODO
Ô∏∑ // 0xFE37 // (top brace) conditional loop
Ô∏∏ // 0xFE38 // (bottom brace) contidional loop
\27 OR \27 pictorial (‚êõ) // (escape) TODO
‚ü® OR „Äà OR ‚å© // 0x27E8 0x3008 0x2329 // (left angle) always goto
‚ü© OR „Äâ OR ‚å™ // 0x27E9 0x3009 0x232A // (right angle) always goto
Ô∏ø // 0xFE3F // (top angle) always goto
ÔπÄ // 0xFE40 // (bottom angle) always goto
  // no-op
! // print as a char
" // literal quote
# // random number
$ // get environment variable
% // modulo division
& // concatenate
' // start and end string
( // always loop
) // always loop
* // dot product
+ // addition
, // separate into singleton
- // subtraction
. // decimal separator
/ // reflection
0 // zero
1 // one
2 // two
3 // three
4 // four
5 // five
6 // six
7 // seven
8 // eight
9 // nine
: // fraction separator
; // singleton of entire left
< // less-than (vectorizes)
= // equal to (vectorizes)
> // greater-than (vectorizes)
? // read as a char
@ // item at index (maps)
A // uppercase alphabet (constant)
B // from binary
C // arc-cosine (maps)
D // contains duplicates
E // natural logarithm
F // TODO
G // get-where [filter]
H // TODO
I // imaginary part (maps)
J // real part (maps)
K // TODO
L // is a list
M // maximum
N // print as a list
O // is sorted
P // is a prime (maps)
Q // read bytes till null
R // is a real number (maps)
S // arc-sine (maps)
T // arc-tangent (maps)
U // is a palindrome
V // eval
W // is either stack empty
X // diagonalize with
Y // split on right
Z // is an integer (maps)
[ // conditional goto
\ // reflection
] // conditional goto
^ // power (vectorizes, zips)
_ // flatten
` // TODO
a // lowercase alphabet (constant)
b // to binary
c // cosine (maps)
d // remove duplicates
e // eulers constant (constant)
f // TODO
g // group by equality
h // TODO
i // imaginary constant (constant)
j // split a complex number (maps)
k // TODO
l // length
m // minimum
n // print a number
o // sort
p // all primes (constant)
q // read a byte
r // round (maps)
s // sine (maps)
t // tangent (maps)
u // upend [reverse]
v // convert to string
w // wipe both stacks
x // cross product
y // join on right
z // entier floor (maps)
{ // conditional loop
| // reflection
} // conditonal loop
~ // negation (maps)
\127 OR \127 pictorial (‚ê°) // (delete) clear console
·∫Ä // 0x1E80 // (capital w with grave) is left stack empty
·∫Å // 0x1E81 // (lower w with grave) wipe left stack
·∫Ç // 0x1E82 // (capital w with acute) is right stack empty
·∫É // 0x1E83 // (lower w with acute) wipe right stack
√Ö // 0x00C5 // (capital a with ring) convert to radians
√• // 0x00E5 // (lower a with ring) convert to degrees
√ó // 0x00D7 // multiply (vectorizes)
√∑ // 0x00F7 // divide (vectorizes)
‚àö // 0x221A // square root (maps)
‚Öü // 0x215F // reciprocal (maps)
‚àû // 0x221E // is a non-finite number, and not NaN (maps)
œÄ // 0x03C0 // pi (constant)
‚àÖ // 0x2205 // (empty set) push empty list
‚àè // 0x220F // product
‚àë // 0x2211 // sum
¬´ // 0x00AB // (left angle quotes) left shift (vectorizes, zips)
¬ª // 0x00BB // (right angle quotes) right shift (vectorizes, zips)
‚à© // 0x2229 // intersection
‚à™ // 0x222A // union
‚àÜ // 0x2206 // symmetric difference
‚à® // 0x2228 // or (vectorizes)
‚àÉ // 0x2203 // any
‚àß // 0x2227 // and (vectorizes)
‚àÄ // 0x2200 // all
‚äª // 0x22BB // xor (vectorizes)
¬¨ // not (maps)
‚ä® // coalesce to truthy/falsey (maps)
‚ä≠ // logical negation (maps)
‚â† // not equals (vectorizes)
‚àã // contains as member
‚äÉ // is superset of
‚â§ // less or equals (vectorizes)
‚â• // greater or equals (vectorizes)
‚âà // (approx equal) within distance one of
‚â° // (identical to) identical to
‚â¢ // (not identical to) not identical to
‚Üê // (left arrow) move top of right stack to top of left stack
‚Üí // (right arrow) move top of left stack to top of right stack
‚Üî // (left-right arrow) swap top of stacks
‚áê // (double left arrow) prepend right stack to left stack
‚áí // (double right arrow) prepend left stack to right stack
‚áî // (left-right double arrow) swap left and right stacks
‚Äî OR ‚Äí OR ‚Äì OR ‚Äï// (em-dash) reflection
‚Ü∫ OR ‚Ü∂ // (anticlockwise arrow) turn anticlockwise
‚Üª OR ‚Ü∑ // (clockwise arrow) turn clockwise
‚ñ≥ // (white up triangle) conditional up
‚ñ∑ // (white right triangle) conditional right
‚ñΩ // (white down triangle) conditional down
‚óÅ // (white left triangle) conditional left
‚óá // (white diamond) conditional any direction
‚ó¢ // (SE black triangle) bounce south east
‚ó£ // (SW black triangle) bounce south west
‚ó§ // (NW black triangle) bounce north west
‚ó• // (NE black triangle) bounce north east
‚ó∏ // (NW white triangle) conditional bounce NW
‚óπ // (NE white triangle) conditional bounce NE
‚ó∫ // (SW white triangle) conditional bounce SW
‚óø // (SE white triangle) conditional bounce SE
‚óè // (black circle) jump over next instruction
‚óã // (white circle) conditional jump over next instruction
‚ñ≤ // (black up triangle) move up
‚ñ∂ // (black right triangle) move right
‚ñº // (black down triangle) move down
‚óÄ // (black left triangle) move left
‚óÜ // (black diamond) random direction
‚éï // (apl quad) restart program from last start location
‚ç∞ // (apl quad question mark) restart program from random start location
‚Äº // 0x203C // print as string
‚Åá // 0x2047 // input chars till null
  // transpose
  // capitalize
  // lower case
  // title case
  // isLetter
  // isMark
  // isNumber
  // isPunctuation
  // isSymbol
  // isSeparator
  // isAscii
  // isLower
  // isUpper
  // isSpace
  // isControl
  // isPrint
  // range from to
  // range from
  // range to
  // range from step
  // range from mul
  // permutations
  // combinations
  // levenshtein distance
  // execute system command, maybe return file descriptor for pipe to read?
  // cycle
  // rotate
  // limit
  // store
  // recall
  // get the time
  // read file
  // write file
  // hash
  // sleep
  // conjugate
  // take
  // drop
  // repeat
  // occurrences
  // uncompress a string
  // bytes to UTF8
  // UTF8 to bytes