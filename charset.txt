‚ñ† OR \0 OR \0 pictorial (‚êÄ) // (black square) end program
\1 // RESERVED
\2 // RESERVED
\3 // RESERVED
\4 // RESERVED
\5 OR \5 pictorial (‚êÖ) // (enquiry) TODO
\6 OR \6 pictorial (‚êÜ) // (acknowledge) TODO
üîî OR \7 OR \7 pictorial (‚êá) // (bell) make a beep
\8 OR \8 pictorial (‚êà) // (backspace) TODO
\t OR \t pictorial (‚êâ) // (h-tab) move to random h-tab in same row
¬∂ OR \n OR \n pictorial (‚êä‚ê§) // (line feed) row delimiter
\11 OR \11 pictorial (‚êã) // (v-tab) move to random v-tab in same column
\12 OR \12 pictorial (‚êå) // (form feed) TODO
\r OR \r pictorial (‚êç) // (carriage return) TODO
‚ñ≥ // (white up triangle) start going up
‚ñ∑ // (white right triangle) start going right
‚ñΩ // (white down triangle) start going down
‚óÅ // (white left triangle) start going left
‚óá // (white diamond) start in any direction
Ôπá // (top bracket) conditional goto
Ôπà // (bottom bracket) conditional goto
\21 OR \21 pictorial (‚êï) // (negative ACK) TODO
Ô∏µ // (top parenthesis) always loop
Ô∏∂ // (bottom parenthesis) always loop
\24 OR \24 pictorial (‚êò) // (cancel) TODO
Ô∏∑ // (top brace) conditional loop
Ô∏∏ // (bottom brace) contidional loop
\27 OR \27 pictorial (‚êõ) // (escape) TODO
‚ü® OR „Äà OR ‚å© // (left angle) always goto
‚ü© OR „Äâ OR ‚å™ // (right angle) always goto
Ô∏ø // (top angle) always goto
ÔπÄ // (bottom angle) always goto
  // no-op
! // TODO ?? print to console
" // literal quote
# // random number
$ // get environment variable
% // modulo division
& // TODO
' // start and end string
( // always loop
) // always loop
* // dot product
+ // addition
, // flatten
- // subtraction
. // decimal separator
/ // reflection
0 // zero
1 // one
2 // two
3 // three
4 // four
5 // five
6 // six
7 // seven
8 // eight
9 // nine
: // fraction separator
; // un-flatten
< // less-than (vectorizes)
= // equal to (vectorizes)
> // greater-than (vectorizes)
? // TODO ?? read from console
@ // TODO
A // uppercase alphabet (constant)
B // TODO
C // arc-cosine (maps)
D // TODO
E // TODO
F // TODO
G // TODO
H // TODO
I // imaginary part (maps)
J // real part (maps)
K // TODO
L // TODO
M // TODO
N // TODO
O // is sorted
P // is a prime (maps)
Q // TODO
R // is a real number (maps)
S // arc-sine (maps)
T // arc-tangent (maps)
U // TODO
V // TODO
W // TODO
X // TODO
Y // TODO
Z // TODO
[ // conditional goto
\ // reflection
] // conditional goto
^ // power (vectorizes, zips)
_ // floor (maps)
` // TODO
a // lowercase alphabet (constant)
b // TODO
c // cosine (maps)
d // TODO
e // eulers constant (constant)
f // TODO
g // TODO
h // TODO
i // imaginary constant (constant)
j // split a complex number (maps)
k // TODO
l // TODO
m // TODO
n // TODO
o // sort
p // all primes (constant)
q // TODO
r // TODO
s // sine (maps)
t // tangent (maps)
u // TODO
v // TODO
w // TODO
x // TODO
y // TODO
z // TODO
{ // conditional loop
| // reflection
} // conditonal loop
~ // negation (maps)
\127 OR \127 pictorial (‚ê°) // (delete) clear console
√ó // multiply
√∑ // divide
‚àö // square root (maps)
‚Öü // reciprocal (maps)
‚àû // is a non-finite number, and not NaN (maps)
œÄ // pi (constant)
‚àÖ // (empty set) push empty list
‚àè // product
‚àë // sum
¬´ // (left angle quotes) left shift (vectorizes, zips)
¬ª // (right angle quotes) right shift (vectorizes, zips)
‚à® // or (folds)
‚àß // and (folds)
‚äª // xor (folds)
¬¨ // not (maps)
‚ä® // coalesce to truthy/falsey (maps)
‚ä≠ // logical negation (maps)
‚â† // not equals (vectorizes)
‚àà // element of (or subset of)
‚â§ // less or equals (vectorizes)
‚â• // greater or equals (vectorizes)
‚âà // (approx equal) within distance one of
‚â° // (identical to) identical to
‚â¢ // (not identical to) not identical to
‚Üê // (left arrow) move top of right stack to top of left stack
‚Üí // (right arrow) move top of left stack to top of right stack
‚Üî // (left-right arrow) swap top of stacks
‚áê // (double left arrow) prepend right stack to left stack
‚áí // (double right arrow) prepend left stack to right stack
‚áî // (left-right double arrow) swap left and right stacks
‚Äî OR ‚Äí OR ‚Äì OR ‚Äï// (em-dash) reflection
‚Ü∫ OR ‚Ü∂ // (anticlockwise arrow) turn anticlockwise
‚Üª OR ‚Ü∑ // (clockwise arrow) turn clockwise
‚ñ≤ // (black up triangle) move up
‚ñ∂ // (black right triangle) move right
‚ñº // (black down triangle) move down
‚óÄ // (black left triangle) move left
‚óÜ // (black diamond) random direction
‚ñ£ // (black square containing white square) restart program from last start location
‚ñ° // (white square) restart program from random start location
