implementation module converter

import StdBool, StdInt
import types, arithmetic, Text, Text.Unicode.Encodings.UTF8, Text.Unicode, Text.Unicode.UChar
from StdFunc import o
from StdList import map
	
unicodeToUTF8 :: [Number] -> String
unicodeToUTF8 string
	= conv (fromUnicode (map (fromInt o toInt) string))
where
	conv :: (UTF8 -> String)
	conv = toString
	
utf8ToUnicode :: String -> [Number]
utf8ToUnicode string
	= map (fromInt o toInt) (toUnicode (conv string))
where
	conv :: (String -> UTF8)
	conv = fromString

//nativeToUnicode :: String -> [Number]
//unicodeToNative :: [Number] -> String


unicodeMapping =
	[(Control (Terminate))
	,(Control (Start East))
	,(Control (Start West))
	,(Control (Start North))
	,(Control (Start South))
	,(Stack (ShiftBase East))
	,(Stack (ShiftBase West))
	,(Operator (IO_Bell))
	,(Stack (ShiftBase North))
	,(Stack (ShiftBase South))
	,(Operator (Set_Length))
	,(Control (LINE))
	,(Control (Turn Anticlockwise))
	,(Control (Turn Clockwise))
	,(Control (Change Always East))
	,(Control (Change Depends East))
	,(Control (Change Always West))
	,(Control (Change Depends West))
	,(Control (Change Always North))
	,(Control (Change Depends North))
	,(Control (Change Always South))
	,(Control (Change Depends South))
	,(Control (Either Always Horizontal))
	,(Control (Either Depends Horizontal))
	,(Control (Either Always Vertical))
	,(Control (Either Depends Vertical))
	,(Control (Mirror Depends Vertical))
	,(Control (Mirror Depends Horizontal))
	,(Control (Mirror Depends Identity))
	,(Control (Mirror Depends Inverse))
	,(Operator (IO_WriteAll))
	,(Operator (IO_ReadAll))
	,(Control (NOOP))
	,(Operator (IO_WriteOnce))
	,(Literal (Quote))
	,(Variable (Random))
	,(Operator (Math_Integral))
	,(Operator (Math_Modulus))
	,(Stack (JoinFromBase))
	,(Control (String))
	,(Control (Loop Left West))
	,(Control (Loop Left East))
	,(Operator (Math_DotProduct))
	,(Operator (Math_Addition))
	,(Operator (Range_FromLeftStepRight))
	,(Operator (Math_Subtraction))
	,(Operator (Range_FromMiddleToZero))
	,(Control (Mirror Always Identity))
	,(Literal (Digit 0))
	,(Literal (Digit 1))
	,(Literal (Digit 2))
	,(Literal (Digit 3))
	,(Literal (Digit 4))
	,(Literal (Digit 5))
	,(Literal (Digit 6))
	,(Literal (Digit 7))
	,(Literal (Digit 8))
	,(Literal (Digit 9))
	,(Operator (Range_FromMiddleAvoidZero))
	,(Operator (Range_FromLeftTimesRight))
	,(Operator (Logic_LessThan))
	,(Operator (Logic_Equality))
	,(Operator (Logic_GreaterThan))
	,(Operator (IO_ReadOnce))
	,(Stack (AdjustOffset))
	,(Literal (Alphabet Uppercase))
	,(Operator (Math_ConvertToBase))
	,(Operator (Math_ArcCoSine))
	,(Stack (Uniques_Middle))
	,(Operator (Math_NaturalExponent))
	,(Operator (Set_Permutations))
	,(Operator (Math_GreatestCommonDivisor))
	,(Operator (Set_Maximum))
	,(Operator (Math_ImaginaryPart))
	,(Operator (Math_RealPart))
	,(Operator (Set_AntiFilter))
	,(Operator (Math_Logarithm))
	,(Operator (Set_Combinations))
	,(Operator (Chars_JoinWithNewlines))
	,(Operator (Logic_IsOrdered))
	,(Operator (Logic_IsPrime))
	,(Variable (Quine))
	,(Operator (Logic_IsReal))
	,(Operator (Math_ArcSine))
	,(Operator (Math_ArcTangent))
	,(Stack (Reverse_Middle))
	,(Operator (Math_Average))
	,(Stack (Delete_Middle))
	,(Operator (Chars_ToUppercase))
	,(Operator (Logic_IsUppercase))
	,(Operator (Logic_IsFinite))
	,(Control (Loop Middle West))
	,(Control (Mirror Always Inverse))
	,(Control (Loop Middle East))
	,(Operator (Math_Exponent))
	,(Operator (Math_Floor))
	,(Operator (Math_Differential))
	,(Literal (Alphabet Lowercase))
	,(Operator (Math_ConvertFromBase))
	,(Operator (Math_CoSine))
	,(Stack (Duplicates_Middle))
	,(Operator (Math_NaturalLogarithm))
	,(Operator (Math_Permutations))
	,(Operator (Math_LeastCommonMultiple))
	,(Operator (Set_Minimum))
	,(Operator (Math_ImaginaryUnit))
	,(Operator (Math_ComplexSplit))
	,(Operator (Set_Filter))
	,(Operator (Math_Base10Logarithm))
	,(Operator (Math_Combinations))
	,(Operator (Chars_SplitOnNewlines))
	,(Operator (Set_MakeOrdered))
	,(Operator (Math_PrimeFactors))
	,(Variable (History))
	,(Operator (Math_Round))
	,(Operator (Math_Sine))
	,(Operator (Math_Tangent))
	,(Stack (Rotate_Middle))
	,(Operator (Math_Abs))
	,(Stack (Drop_Middle))
	,(Operator (Logic_IsLowercase))
	,(Operator (Chars_ToLowercase))
	,(Operator (Math_Conjugate))
	,(Control (Loop Right West))
	,(Control (Mirror Always Vertical))
	,(Control (Loop Right East))
	,(Operator (Math_Negation))
	,(Operator (IO_ReadWrite))
	,(Operator (IO_WriteRead))
	,(Operator (IO_Interrobang))
	,(Operator (Math_Multiplication))
	,(Operator (Vector_Multiplication))
	,(Operator (Math_Division))
	,(Operator (Vector_Addition))
	,(Operator (Math_SquareRoot))
	,(Operator (Math_Reciprocal))
	,(Operator (Logic_IsInfinite))
	,(Operator (Bitwise_Or))
	,(Operator (Vector_Or))
	,(Operator (Bitwise_And))
	,(Operator (Vector_And))
	,(Operator (Bitwise_Xor))
	,(Operator (Bitwise_Not))
	,(Operator (Bitwise_Nor))
	,(Operator (Bitwise_Nand))
	,(Operator (Bitwise_Xnor))
	,(Operator (Set_Intersection))
	,(Operator (Set_Union))
	,(Operator (Logic_ElementOf))
	,(Operator (Logic_Contains))
	,(Operator (Vector_LessThan))
	,(Operator (Vector_GreaterThan))
	,(Operator (Vector_Equality))
	,(Operator (Logic_LessOrEqual))
	,(Operator (Vector_LessOrEqual))
	,(Operator (Logic_GreaterOrEqual))
	,(Operator (Vector_GreaterOrEqual))
	,(Operator (Logic_Inequality))
	,(Operator (Logic_SetEquality))
	,(Operator (Logic_SetInequality))
	,(Operator (Logic_SubsetNotEqual))
	,(Operator (Logic_SupersetNotEqual))
	,(Operator (Logic_SubsetOrEqual))
	,(Operator (Logic_SupersetOrEqual))
	,(Operator (Logic_NotSubsetNorEqual))
	,(Operator (Logic_NotSupersetNorEqual))
	,(Operator (Math_RadiansToDegrees))
	,(Operator (Math_DegreesToRadians))
	,(Operator (Math_Ceiling))
	,(Operator (Bitwise_LeftShift))
	,(Operator (Bitwise_RightShift))
	,(Operator (IO_Sleep))
	,(Operator (IO_Timestamp))
	,(Literal (Pi))
	,(Stack (SwapLeftRight))
	,(Stack (MoveAll NorthWest))
	,(Stack (MoveAll NorthEast))
	,(Stack (MoveAll SouthEast))
	,(Stack (MoveAll SouthWest))
	,(Stack (Reverse_Left))
	,(Stack (Reverse_Right))
	,(Stack (Reverse_Both))
	,(Stack (Reverse_Primary))
	,(Stack (Reverse_Base))
	,(Stack (Reverse_All))
	,(Stack (Rotate_Left))
	,(Stack (Rotate_Right))
	,(Stack (Rotate_Both))
	,(Stack (Rotate_Primary))
	,(Stack (Rotate_Base))
	,(Stack (Rotate_All))
	,(Stack (Delete_Left))
	,(Stack (Delete_Right))
	,(Stack (Delete_Both))
	,(Stack (Delete_Base))
	,(Stack (Delete_Main))
	,(Stack (Delete_All))
	,(Stack (Drop_Left))
	,(Stack (Drop_Right))
	,(Stack (Drop_Both))
	,(Stack (Drop_Base))
	,(Stack (Drop_Main))
	,(Stack (Unpack_RightLeft))
	,(Stack (Unpack_LeftRight))
	,(Stack (SwapTop Inverse))
	,(Stack (SwapTop Identity))
	,(Stack (SwapTop Horizontal))
	,(Stack (SwapTop Vertical))
	,(Stack (MoveTop East))
	,(Stack (MoveTop West))
	,(Stack (MoveTop North))
	,(Stack (MoveTop South))
	,(Stack (MoveTop NorthWest))
	,(Stack (MoveTop NorthEast))
	,(Stack (MoveTop SouthEast))
	,(Stack (MoveTop SouthWest))
	,(Stack (CopyTop East))
	,(Stack (CopyTop West))
	,(Stack (CopyTop North))
	,(Stack (CopyTop NorthWest))
	,(Stack (CopyTop NorthEast))
	,(Stack (CopyTop SouthEast))
	,(Stack (CopyTop SouthWest))
	,(Stack (CopyBoth Horizontal))
	,(Stack (CopyBoth Vertical))
	,(Stack (CycleFull Clockwise))
	,(Stack (CycleFull Anticlockwise))
	,(Stack (CycleTops Clockwise))
	,(Stack (CycleTops Anticlockwise))
	,(Operator (Math_Product))
	,(Operator (Math_Sum))
	,(Operator (Logic_Any))
	,(Operator (Logic_None))
	,(Operator (Set_PowerSet))
	,(Operator (Set_Subsets))
	,(Control (Bounce Always NorthEast))
	,(Control (Bounce Depends NorthEast))
	,(Control (Bounce Always NorthWest))
	,(Control (Bounce Depends NorthWest))
	,(Control (Bounce Always SouthEast))
	,(Control (Bounce Depends SouthEast))
	,(Control (Bounce Always SouthWest))
	,(Control (Bounce Depends SouthWest))
	,(Control (Mirror Always Reflection))
	,(Control (Mirror Depends Reflection))
	,(Stack (Uniques_Main))
	,(Stack (Uniques_Base))
	,(Stack (Duplicates_Main))
	,(Stack (Duplicates_Base))
	,(Stack (Replicate_Base))
	,(Stack (Replicate_TopOfMiddle))
	,(Stack (Replicate_AllOfMiddle))
	,(Stack (Repeat_TopOfMiddle))
	,(Stack (Repeat_AllOfMiddle))
	,(Operator (Math_Maximum))
	,(Operator (Math_Minimum))
	]
	