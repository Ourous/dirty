‚èª // power symbol
‚èµ // start, going right
‚è¥ // start, going left
‚è∂ // start, going up
‚è∑ // start, going down
‚≠™ // move current baseline down 1
üîî // bell character
‚≠´ // go to next baseline, if none, create new baseline at the end of <main>
‚≠≠ // go to last baseline, if none, go to index 0
¬∂ // newline
‚≠¨ // move current baseline up 1
‚≠Æ // rotate counterclockwise
‚≠Ø // rotate clockwise
‚¨Ö // solid left arrow
‚á¶ // white left arrow
‚¨Ü // solid up arrow
‚áß // white up arrow
‚¨á // solid down arrow
‚á© // white down arrow
‚Æï // solid right arrow
‚á® // white right arrow
‚¨å // horizontal dual arrow
‚¨Ñ // white horizontal arrow
‚¨ç // vertical dual arrow
‚á≥ // white vertical arrow
‚ãÆ // vertical dots
‚ãØ // horizontal dots
‚ã∞ // up-right dots
‚ã± // up-left dots
‚Äº // output all of <mid>
‚Åá // get all input, put into <mid>
  // no-op
! // output top of <mid>
" // literal '
# // random
$
% // modulo
& // join from <baseline>
' // start and end a string
( // loop if <left> is true or empty
) // loop if <left> is true or empty
* // dot product
+ // plus
, // from <left>, in steps of <right>
- // minus
. // from <mid> to zero, in steps of 1
/ // reflection around SW->NE
0 // multiply <mid> by 10
1 // multiply <mid> by 10, add 1
2 // multiply <mid> by 10, add 2
3 // multiply <mid> by 10, add 3
4 // multiply <mid> by 10, add 4
5 // multiply <mid> by 10, add 5
6 // multiply <mid> by 10, add 6
7 // multiply <mid> by 10, add 7
8 // multiply <mid> by 10, add 8
9 // multiply <mid> by 10, add 9
: // from <mid> away from zero in steps of 1
; // from <left>, in magnitudes of <right>
< // less-than
= // top-equals
> // greater-than
? // get single char of input, store in <mid>
@ // select the mid stack offset (from main stack) by the top of the mid stack
A // uppercase alphabet
B // convert <left> to a bunch of digits, in the base of <right>
C // arc-cosine
D // remove duplicates from <mid>
E // length of <mid> (elements in..)
F // permutations of <mid>
G // greatest-common-divisor
H // maximum of <mid>
I // has an imaginary component
J // just the real component
K // keep from <left> where not <right>
L // natural log of <mid>
M // combinations of <mid>
N // join <main> with newlines
O // is ordered
P // is prime
Q // do a quine
R // is a real number
S // arc-sine
T // arc-tangent
U // upend the mid stack
V // average
W // wipe the mid stack
X // to uppercase
Y // is uppercase
Z // is an integer
[ // loop if <mid> is true
\ // reflection around NW->SE
] // loop if <mid> is true
^ // exponentiate
_ // floor
` // coefficients of the differential of a polynomial with coefficients of <mid>
a // lowercase alphabet
b // convert <left> stack to an integer, assuming it's in the base of <right>
c // cosine
d // retain only duplicates from <mid>
e // eulers constant
f // integer permutation using top of <left> and <right>
g // least-common-multiple
h // minimum of <mid>
i // imaginary unit
j // just the imaginary component
k // keep from <left> where <right>
l // log <left> in base<right>
m // integer combinations using top of <left> and <right>
n // split <mid> on newlines
o // order
p // prime with the index of <mid>
q // every instruction traversed so far, in order
r // round
s // sine
t // tangent
u // rotate the mid stack by <mid>
v // absolute value
w // remove the <nth> elements from the <mid> stack
x // to lowercase
y // is lowercase
z // remove zeroes
{ // loop if <right> is true or empty
| // reflection around the vertical
} // loop if <right> is true or empty
~ // conjugate
‚Åà // output <right>, read into <left>
‚Åâ // output <left>, read into <right>
‚ÄΩ // output and pop <mid>, read into <mid>
√ó // multiply
‚®∞ // vectorized multiplication
√∑ // divide
‚àî // vectorized plus
‚àö // square root
‚Öü // reciprocal
‚àû // infinity
‚àß // and
‚©ë // vectorized and
‚à® // or
‚©í // vectorized or
¬¨ // not
‚äª // xor
‚äΩ // nor
‚à• // xnor
‚äº // nand
‚à© // intersection
‚à™ // union
‚àà // element of
‚àâ // not element of
‚àã // contains as member
‚àå // does not contain
‚ãñ // vectorized less-than
‚ãó // vectorized greater-than
‚âê // vectorized equals
‚â§ // less or equals
‚©ø // vectorized less-or-equals
‚â• // greater or equals
‚™Ä // vectorized greater-or-equals
‚â† // not equals
‚â° // identical to (stack equals)
‚â¢ // not identical to (stack not equals)
‚äÇ // subset of
‚äÉ // superset of
‚äÑ // not subset of
‚äÖ // not superset of
‚äÜ // subset or equal
‚äá // superset or equal
‚äà // not subset nor equal
‚äâ // not superset nor equal
√• // radians to angle
√Ö // angle to radians
¬Ø // ceiling
¬´ // left-shift
¬ª // right-shift
‚åõ // hourglass symbol (sleep)
‚åö // watch symbol (timestamp)
œÄ // pi
‚áî // swap the left and right stacks
‚§Ü // append-copy the right stack to the left stack
‚§á // append-copy the left stack to the right stack
√ô // upend the left stack
√ö // upend the right stack
√ú // upend the left and right stacks
≈™ // upend the left, right, and mid stacks
·ª§ // upend from baseline
√õ // upend every stack
√π // rotate left stack by <mid>
√∫ // rotate right stack by <mid>
√º // rotate left and right stacks by <mid>
≈´ // rotate left, right, and mid stacks by <mid>
·ª• // rotate from baseline by <mid>
√ª // rotate every stack by <mid>
·∫Ä // wipe the left stack
·∫Ç // wipe the right stack
·∫Ñ // wipe the left and right stacks
·∫à // wipe from baseline
·∫Ü // wipe the main stack
≈¥ // wipe every stack
·∫Å // remove the <mid-th> elements from the left stack
·∫É // remove the <mid-th> elements from the right stack
·∫Ö // remove the <mid-th> elements from the left and right stacks
·∫á // remove the <mid-th> elements from main stack
≈µ // remove the <mid-th> elements from every stack
‚§± // mid -> right, mid -> left
‚§≤ // mid -> left, mid -> right
‚§° // swap top of left and mid
‚§¢ // swap top of right and mid
‚≠§ // swap top of right and left
‚≠• // swap top and bottom of mid
‚≠¢ // move top of left to right
‚≠° // move bottom of mid to top
‚≠£ // move top of mid to bottom
‚≠† // move top of right to left
‚≠¶ // move top of mid to left
‚≠ß // move top of mid to right
‚≠® // move top of left to mid
‚≠© // move top of right to mid
‚≠∞ // copy top of right to left
‚≠± // copy top of mid
‚≠≤ // copy top of left to right
‚≠∂ // copy top of mid to left
‚≠∑ // copy top of mid to right
‚≠∏ // copy top of left to mid
‚≠π // copy top of right to mid
‚≠æ // copy top of left and right to eachother
‚≠ø // copy top and bottom of mid to eachother
‚Æê // rotate stacks clockwise
‚Æë // rotate stacks counterclockwise
‚Æí // rotate tops of stacks clockwise
‚Æì // rotate tops of stacks counterclockwise
‚àè // product
‚àë // sum
‚àÄ // all
‚àÉ // any
‚àÑ // none
ùí´ // power set
ùíÆ // ordered subsets
‚¨à // bounce NE
‚¨Ä // conditional bounce NE
‚¨â // bounce NW
‚¨Å // conditional bounce NW
‚¨ä // bounce SE
‚¨Ç // conditional bounce SE
‚¨ã // bounce SW
‚¨É // conditional bounce SW
‚¨ö // conditional universal reflect
‚¨ú // universal reflect
·∏ä // remove duplicates from <main>
·∏å // remove duplicates from <baseline>
·∏ã // retain only duplicates from <main>
·∏ç // retain only duplicates from <baseline>
‚§ó // copy from <baseline> onto end of <main>
‚§ñ // duplicate <main>
‚§ê // duplciate <mid>
·∏¶ // maximum of tops of <left> and <right>
·∏ß // minimum of tops of <left> and <right>