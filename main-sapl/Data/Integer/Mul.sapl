|| ?module? Data.Integer.Mul


Data.Integer.Mul.mulIo !a_0::I !b_1::I = error "no AnyCodeExpr"
Data.Integer.Mul.mulud !a_0::I !b_1::I = error "no AnyCodeExpr"
Data.Integer.Mul.mul_int_int_o_14 !s1_0::I !s2_1::I = let m1_1_0::I = <{StdInt.>>}> s1_0 31, abs_s1_1_1 = <{StdInt.-_7}> (StdInt.bitxor s1_0 m1_1_0) m1_1_0, m2_1_2::I = <{StdInt.>>}> s2_1 31, abs_s2_1_3::I = <{StdInt.-_7}> (StdInt.bitxor s2_1 m2_1_2) m2_1_2, _x_1_4::I = Data.Integer.Mul.mulud abs_s1_1_1 abs_s2_1_3, h_1_5::I = select _x_1_4::_Tuple2 0 in case (<{StdInt.==_16}> h_1_5 0) (True -> Data.Integer._Integer (StdInt.bitxor m1_1_0 m2_1_2) (_SystemArray.update_13 (_SystemArray._createArray_8 1) 0 (select _x_1_4::_Tuple2 1))) (False -> Data.Integer._Integer (StdInt.bitxor m1_1_0 m2_1_2) (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray._createArray_8 2) 1 h_1_5) 0 (select _x_1_4::_Tuple2 1))) 
Data.Integer.Mul.create_unintialized_int_array !size_0::I = error "no AnyCodeExpr"
Data.Integer.Mul.addLU !_x_0::I !_x_1::I !_x_2::I = error "no AnyCodeExpr"
Data.Integer.Mul.mul_uint_uint_a !i_0::I !c_1::I !m_2::I !sa_3 !da_4 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_12 sa_3)) (True -> let !sai_2_0::I = _SystemArray.select_11 sa_3 i_0, _x_2_1 = Data.Integer.Mul.mulud sai_2_0 m_2, _x_2_2 = Data.Integer.Mul.addLU (select _x_2_1::_Tuple2 0) (select _x_2_1::_Tuple2 1) c_1 in Data.Integer.Mul.mul_uint_uint_a (<{StdInt.+_6}> i_0 1) (select _x_2_2::_Tuple2 0) m_2 sa_3 (_SystemArray.update_13 da_4 i_0 (select _x_2_2::_Tuple2 1))) (False -> <{_Tuple2!3}> c_1 da_4) 
Data.Integer.Mul.unsafe_resize_int_array !s_0::I !a_1 = error "no AnyCodeExpr"
Data.Integer.Mul.resize_int_array !s_0::I !a_1 = case (StdBool.not (<{StdInt.<_17}> (_SystemArray.size_12 a_1) s_0)) (True -> Data.Integer.Mul.unsafe_resize_int_array s_0 a_1) 
Data.Integer.Mul.mul_unsigned_int_ints_16 !m_0::I !a_1 = let !s_1_0::I = _SystemArray.size_12 a_1, da_1_1::I = Data.Integer.Mul.create_unintialized_int_array (<{StdInt.+_6}> s_1_0 1), _x_1_2 = Data.Integer.Mul.mul_uint_uint_a 0 0 m_0 a_1 da_1_1, c_1_3 = select _x_1_2::_Tuple2 0 in case (<{StdInt.==_16}> c_1_3 0) (True -> Data.Integer.Mul.resize_int_array s_1_0 (select _x_1_2::_Tuple2 1)) (False -> _SystemArray.update_13 (select _x_1_2::_Tuple2 1) s_1_0 c_1_3) 
Data.Integer.Mul.mul_int_integer_15 !s1_0::I s2_1::I a2_2 = case (<{StdInt.<_17}> 0 s1_0) (True -> Data.Integer._Integer s2_1 (Data.Integer.Mul.mul_unsigned_int_ints_16 s1_0 a2_2)) (False -> case (<{StdInt.==_16}> s1_0 0) (True -> Data.Integer._Integer 0 (_SystemArray._createArray_8 0)) (False -> Data.Integer._Integer (StdInt.bitnot s2_1) (Data.Integer.Mul.mul_unsigned_int_ints_16 (<{StdInt.~_15}> s1_0) a2_2)) ) 
Data.Integer.Mul.add_mul_uint_uint_a_12 !i_0::I !c_1::I !d_2::I !m_3::I !sa_4 !da_5 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_12 sa_4)) (True -> let !sai_2_0::I = _SystemArray.select_11 sa_4 i_0, _x_2_1 = Data.Integer.Mul.mulud sai_2_0 m_3, id_2_2 = <{StdInt.+_6}> i_0 d_2, _x_2_3 = _SystemArray.uselect_14 da_5 id_2_2, _x_2_4::I = Data.Integer.Mul.addLU (select _x_2_1::_Tuple2 0) (select _x_2_3::_Tuple2 0) c_1, _x_2_5 = Data.Integer.Mul.addLU (select _x_2_4::_Tuple2 0) (select _x_2_1::_Tuple2 1) (select _x_2_4::_Tuple2 1) in Data.Integer.Mul.add_mul_uint_uint_a_12 (<{StdInt.+_6}> i_0 1) (select _x_2_5::_Tuple2 0) d_2 m_3 sa_4 (_SystemArray.update_13 (select _x_2_3::_Tuple2 1) id_2_2 (select _x_2_5::_Tuple2 1))) (False -> _SystemArray.update_13 da_5 (<{StdInt.+_6}> i_0 d_2) c_1) 
Data.Integer.Mul.skip_zeros_9::I !_vArray_0 !i_1::I a_2 = case (<{StdInt.==_16}> (select _vArray_0::<{_SystemArray.Array;}> 3 a_2 i_1) 0) (True -> Data.Integer.Mul.skip_zeros_9 _vArray_0 (<{StdInt.-_7}> i_1 1) a_2) (False -> i_1) 
Data.Integer.Mul.skip_zeros_17::I !i_0::I !a_1 = case (<{StdInt.==_16}> (_SystemArray.select_11 a_1 i_0) 0) (True -> Data.Integer.Mul.skip_zeros_17 (<{StdInt.-_7}> i_0 1) a_1) (False -> i_0) 
Data.Integer.Mul.remove_zeros_13 !a_0 = let !n_1_0::I = <{StdInt.-_7}> (_SystemArray.size_12 a_0) 1 in case (StdBool.not (<{StdInt.==_16}> (_SystemArray.select_11 a_0 n_1_0) 0)) (True -> a_0) (False -> let !n_3_0::I = Data.Integer.Mul.skip_zeros_17 n_1_0 a_0 in Data.Integer.Mul.resize_int_array (<{StdInt.+_6}> n_3_0 1) a_0) 
Data.Integer.Mul.repeat_add_muls_11 !_vArray_0 !i_1::I a1_2 a2_3 !da_4 = case (<{StdInt.<_17}> i_1 (select _vArray_0::<{_SystemArray.Array;}> 4 a1_2)) (True -> Data.Integer.Mul.repeat_add_muls_11 _vArray_0 (<{StdInt.+_6}> i_1 1) a1_2 a2_3 (Data.Integer.Mul.add_mul_uint_uint_a_12 0 0 i_1 (select _vArray_0::<{_SystemArray.Array;}> 3 a1_2 i_1) a2_3 da_4)) (False -> Data.Integer.Mul.remove_zeros_13 da_4) 
Data.Integer.Mul.mul_ints_ints_smallest_first_10 !_vArray_0 a1_1 !a2_2 = let s2_1_0 = _SystemArray.size_12 a2_2, _x_1_1::I = Data.Integer.Mul.mul_uint_uint_a 0 0 (select _vArray_0::<{_SystemArray.Array;}> 3 a1_1 0) a2_2 (Data.Integer.Mul.create_unintialized_int_array (<{StdInt.+_6}> (select _vArray_0::<{_SystemArray.Array;}> 4 a1_1) s2_1_0)) in Data.Integer.Mul.repeat_add_muls_11 _vArray_0 1 a1_1 a2_2 (_SystemArray.update_13 (select _x_1_1::_Tuple2 1) s2_1_0 (select _x_1_1::_Tuple2 0))
Data.Integer.Mul.repeat_add_muls_19 !i_0::I !a1_1 a2_2 !da_3 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_12 a1_1)) (True -> Data.Integer.Mul.repeat_add_muls_19 (<{StdInt.+_6}> i_0 1) a1_1 a2_2 (Data.Integer.Mul.add_mul_uint_uint_a_12 0 0 i_0 (_SystemArray.select_11 a1_1 i_0) a2_2 da_3)) (False -> Data.Integer.Mul.remove_zeros_13 da_3) 
Data.Integer.Mul.mul_ints_ints_smallest_first_18 !a1_0 !a2_1 = let s2_1_0 = _SystemArray.size_12 a2_1, _x_1_1::I = Data.Integer.Mul.mul_uint_uint_a 0 0 (_SystemArray.select_11 a1_0 0) a2_1 (Data.Integer.Mul.create_unintialized_int_array (<{StdInt.+_6}> (_SystemArray.size_12 a1_0) s2_1_0)) in Data.Integer.Mul.repeat_add_muls_19 1 a1_0 a2_1 (_SystemArray.update_13 (select _x_1_1::_Tuple2 1) s2_1_0 (select _x_1_1::_Tuple2 0))
Data.Integer.Mul.mul_integer_a !a1_0 !a2_1 = case (<{StdInt.<_17}> (_SystemArray.size_12 a1_0) (_SystemArray.size_12 a2_1)) (True -> Data.Integer.Mul.mul_ints_ints_smallest_first_18 a1_0 a2_1) (False -> Data.Integer.Mul.mul_ints_ints_smallest_first_18 a2_1 a1_0) 
Data.Integer.Mul.mul_integer !_x_0 !_x_1 = case _x_0 (Data.Integer._Integer s1_1_0 a1_1_1 -> case _x_1 (Data.Integer._Integer s2_2_0 a2_2_1 -> case (<{StdInt.==_16}> (_SystemArray.size_12 a1_1_1) 0) (True -> case (<{StdInt.==_16}> (_SystemArray.size_12 a2_2_1) 0) (True -> let _x_5_0 = Data.Integer.Mul.mulIo s1_1_0 s2_2_0 in case (select _x_5_0::_Tuple2 0) (True -> Data.Integer.Mul.mul_int_int_o_14 s1_1_0 s2_2_0) (False -> Data.Integer._Integer (select _x_5_0::_Tuple2 1) (_SystemArray._createArray_8 0)) ) (False -> Data.Integer.Mul.mul_int_integer_15 s1_1_0 s2_2_0 a2_2_1) ) (False -> case (<{StdInt.==_16}> (_SystemArray.size_12 a2_2_1) 0) (True -> Data.Integer.Mul.mul_int_integer_15 s2_2_0 s1_1_0 a1_1_1) (False -> Data.Integer._Integer (StdInt.bitxor s1_1_0 s2_2_0) (Data.Integer.Mul.mul_integer_a a1_1_1 a2_2_1)) ) ) ) 


|| Converted Records
