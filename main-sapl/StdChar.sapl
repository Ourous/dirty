|| ?module? StdChar


StdChar.digitToInt::I !c_0::C = <{StdInt.-_7}> (StdInt.toInt_20 c_0) 48
StdChar.clear_lowercase_bit::C !c_0::C = error "no AnyCodeExpr"
<{StdChar.<_19}>::B !a_0::C !b_1::C = error "no AnyCodeExpr"
StdChar.toUpper::C !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'z' c_0)) (False -> False) ) (True -> StdChar.clear_lowercase_bit c_0) (False -> c_0) 
StdChar.set_lowercase_bit::C !c_0::C = error "no AnyCodeExpr"
StdChar.toLower::C !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_0)) (False -> False) ) (True -> StdChar.set_lowercase_bit c_0) (False -> c_0) 
StdChar.isUpper::B !c_0::C = case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_0)) (False -> False) 
StdChar.isLower::B !c_0::C = case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'z' c_0)) (False -> False) 
StdChar.isAlpha::B !c_0::C = let c_1_0::C = StdChar.clear_lowercase_bit c_0 in case (StdBool.not (<{StdChar.<_19}> c_1_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_1_0)) (False -> False) 
StdChar.isAlphanum::B !c_0::C = let c_1_0::C = StdChar.clear_lowercase_bit c_0 in case (case (StdBool.not (<{StdChar.<_19}> c_1_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_1_0)) (False -> False) ) (True -> True) (False -> case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) 
StdChar.isDigit::B !c_0::C = case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) 
StdChar.isOctDigit::B !c_0::C = case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '7' c_0)) (False -> False) 
StdChar.isHexDigit::B !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) (True -> True) (False -> let uc_2_0::C = StdChar.clear_lowercase_bit c_0 in case (StdBool.not (<{StdChar.<_19}> uc_2_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'F' uc_2_0)) (False -> False) ) 
<{StdChar.==_18}>::B !a_0::C !b_1::C = error "no AnyCodeExpr"
StdChar.isSpace::B !c_0::C = case (<{StdChar.==_18}> c_0 ' ') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\t') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\r') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\f') (True -> True) (False -> <{StdChar.==_18}> c_0 '\v') ) ) ) ) 
StdChar.isControl::B !c_0::C = case (<{StdChar.<_19}> c_0 ' ') (True -> True) (False -> <{StdChar.==_18}> c_0 '\x7F') 
StdChar.isPrint::B !c_0::C = case (StdBool.not (<{StdChar.<_19}> c_0 ' ')) (True -> StdBool.not (<{StdChar.<_19}> '~' c_0)) (False -> False) 
StdChar.isAscii::B !c_0::C = <{StdInt.<_17}> (StdInt.toInt_20 c_0) 128
<{StdChar.+_14}>::C !a_0::C !b_1::C = error "no AnyCodeExpr"
<{StdChar.-_15}>::C !a_0::C !b_1::C = error "no AnyCodeExpr"
StdChar.zero_16::C = error "no AnyCodeExpr"
StdChar.one_17::C = error "no AnyCodeExpr"
StdChar.toChar_20::C !a_0::C = error "no AnyCodeExpr"
StdChar.toChar_21::C !a_0::I = error "no AnyCodeExpr"
StdChar.fromChar_22::I !a_0::C = error "no AnyCodeExpr"
StdChar.fromChar_23::C !a_0::C = error "no AnyCodeExpr"
StdChar.fromChar_24 !a_0::C = error "no AnyCodeExpr"


|| Converted Records
