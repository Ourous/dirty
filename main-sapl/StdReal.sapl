|| ?module? StdReal


StdReal.entier::I !a_0::D = error "no AnyCodeExpr"
<{StdReal.+_1}>::D !a_0::D !b_1::D = error "no AnyCodeExpr"
<{StdReal.-_2}>::D !a_0::D !b_1::D = error "no AnyCodeExpr"
StdReal.zero_3::D = error "no AnyCodeExpr"
<{StdReal.*_4}>::D !a_0::D !b_1::D = error "no AnyCodeExpr"
<{StdReal./_5}>::D !a_0::D !b_1::D = error "no AnyCodeExpr"
StdReal.one_6::D = error "no AnyCodeExpr"
<{StdReal.^_7}>::D !a_0::D !b_1::D = error "no AnyCodeExpr"
StdReal.abs_8::D !x_0::D = error "no AnyCodeExpr"
<{StdReal.==_11}>::B !a_0::D !b_1::D = error "no AnyCodeExpr"
<{StdReal.<_12}>::B !a_0::D !b_1::D = error "no AnyCodeExpr"
StdReal.sign_9::I !x_0::D = case (<{StdReal.==_11}> x_0 0.0) (True -> 0) (False -> case (<{StdReal.<_12}> x_0 0.0) (True -> -1) (False -> 1) ) 
<{StdReal.~_10}>::D !x_0::D = error "no AnyCodeExpr"
StdReal.toReal_13::D !a_0::I = error "no AnyCodeExpr"
StdReal.toReal_14::D !a_0::D = error "no AnyCodeExpr"
StdReal.toRealWithExp_37::D !len_0::I !s_1 !posn_2::I !val_3::D !dn_4::I !eneg_5::I !eval_6::I = case (<{StdInt.==_16}> posn_2 len_0) (True -> let e_2_0::I = <{StdInt.-_7}> (<{StdInt.*_9}> eneg_5 eval_6) dn_4 in case (StdBool.not (<{StdInt.<_17}> e_2_0 0)) (True -> <{StdReal.*_4}> val_3 (<{StdReal.^_7}> 10.0 (StdReal.toReal_13 e_2_0))) (False -> case (StdBool.not (<{StdInt.<_17}> e_2_0 -308)) (True -> <{StdReal./_5}> val_3 (<{StdReal.^_7}> 10.0 (StdReal.toReal_13 (<{StdInt.~_15}> e_2_0)))) (False -> <{StdReal./_5}> (<{StdReal./_5}> val_3 (<{StdReal.^_7}> 5.0 (StdReal.toReal_13 (<{StdInt.~_15}> e_2_0)))) (<{StdReal.^_7}> 2.0 (StdReal.toReal_13 (<{StdInt.~_15}> e_2_0)))) ) ) (False -> let c_2_0::C = _SystemArray.select_19 s_1 posn_2 in case (case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_2_0)) (False -> False) ) (True -> StdReal.toRealWithExp_37 len_0 s_1 (<{StdInt.+_6}> posn_2 1) val_3 dn_4 eneg_5 (<{StdInt.+_6}> (<{StdInt.-_7}> (StdInt.toInt_20 c_2_0) (StdInt.toInt_20 '0')) (<{StdInt.*_9}> 10 eval_6))) (False -> 0.0) ) 
StdReal.toRealWithDot_36::D !len_0::I !s_1 !posn_2::I !val_3::D !dn_4::I = case (<{StdInt.==_16}> posn_2 len_0) (True -> case (<{StdInt.==_16}> dn_4 0) (True -> val_3) (False -> <{StdReal./_5}> val_3 (<{StdReal.^_7}> 10.0 (StdReal.toReal_13 dn_4))) ) (False -> let c_2_0::C = _SystemArray.select_19 s_1 posn_2 in case (case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_2_0)) (False -> False) ) (True -> StdReal.toRealWithDot_36 len_0 s_1 (<{StdInt.+_6}> posn_2 1) (<{StdReal.+_1}> (StdReal.toReal_13 (<{StdInt.-_7}> (StdInt.toInt_20 c_2_0) (StdInt.toInt_20 '0'))) (<{StdReal.*_4}> 10.0 val_3)) (<{StdInt.+_6}> dn_4 1)) (False -> case (case (<{StdChar.==_18}> c_2_0 'e') (True -> True) (False -> <{StdChar.==_18}> c_2_0 'E') ) (True -> case (case (<{StdInt.<_17}> posn_2 (<{StdInt.-_7}> len_0 2)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 s_1 (<{StdInt.+_6}> posn_2 1)) '-') (False -> False) ) (True -> StdReal.toRealWithExp_37 len_0 s_1 (<{StdInt.+_6}> posn_2 2) val_3 dn_4 -1 0) (False -> case (case (<{StdInt.<_17}> posn_2 (<{StdInt.-_7}> len_0 2)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 s_1 (<{StdInt.+_6}> posn_2 1)) '+') (False -> False) ) (True -> StdReal.toRealWithExp_37 len_0 s_1 (<{StdInt.+_6}> posn_2 2) val_3 dn_4 1 0) (False -> case (<{StdInt.<_17}> posn_2 (<{StdInt.-_7}> len_0 1)) (True -> StdReal.toRealWithExp_37 len_0 s_1 (<{StdInt.+_6}> posn_2 1) val_3 dn_4 1 0) (False -> 0.0) ) ) ) (False -> 0.0) ) ) 
StdReal.toReal1_35::D !len_0::I !s_1 !posn_2::I !val_3::D = case (<{StdInt.==_16}> posn_2 len_0) (True -> val_3) (False -> let c_2_0::C = _SystemArray.select_19 s_1 posn_2 in case (case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_2_0)) (False -> False) ) (True -> StdReal.toReal1_35 len_0 s_1 (<{StdInt.+_6}> posn_2 1) (<{StdReal.+_1}> (StdReal.toReal_13 (<{StdInt.-_7}> (StdInt.toInt_20 c_2_0) (StdInt.toInt_20 '0'))) (<{StdReal.*_4}> 10.0 val_3))) (False -> case (<{StdChar.==_18}> c_2_0 '.') (True -> StdReal.toRealWithDot_36 len_0 s_1 (<{StdInt.+_6}> posn_2 1) val_3 0) (False -> case (case (<{StdChar.==_18}> c_2_0 'e') (True -> True) (False -> <{StdChar.==_18}> c_2_0 'E') ) (True -> case (case (<{StdInt.<_17}> posn_2 (<{StdInt.-_7}> len_0 2)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 s_1 (<{StdInt.+_6}> posn_2 1)) '-') (False -> False) ) (True -> StdReal.toRealWithExp_37 len_0 s_1 (<{StdInt.+_6}> posn_2 2) val_3 0 -1 0) (False -> case (case (<{StdInt.<_17}> posn_2 (<{StdInt.-_7}> len_0 2)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 s_1 (<{StdInt.+_6}> posn_2 1)) '+') (False -> False) ) (True -> StdReal.toRealWithExp_37 len_0 s_1 (<{StdInt.+_6}> posn_2 2) val_3 0 1 0) (False -> case (<{StdInt.<_17}> posn_2 (<{StdInt.-_7}> len_0 1)) (True -> StdReal.toRealWithExp_37 len_0 s_1 (<{StdInt.+_6}> posn_2 1) val_3 0 1 0) (False -> 0.0) ) ) ) (False -> 0.0) ) ) ) 
StdReal.toReal_15::D !s_0 = let len_1_0::I = _SystemArray.size_20 s_0 in case (<{StdInt.==_16}> len_1_0 0) (True -> 0.0) (False -> let first_3_0::C = _SystemArray.select_19 s_0 0 in case (<{StdChar.==_18}> first_3_0 '-') (True -> <{StdReal.~_10}> (StdReal.toReal1_35 len_1_0 s_0 1 0.0)) (False -> case (<{StdChar.==_18}> first_3_0 '+') (True -> StdReal.toReal1_35 len_1_0 s_0 1 0.0) (False -> StdReal.toReal1_35 len_1_0 s_0 0 0.0) ) ) 
StdReal.fromReal_16::I !a_0::D = error "no AnyCodeExpr"
StdReal.fromReal_17::D !a_0::D = error "no AnyCodeExpr"
StdReal.fromReal_18 !a_0::D = error "no AnyCodeExpr"
StdReal.ln_19::D !a_0::D = error "no AnyCodeExpr"
StdReal.log10_20::D !a_0::D = error "no AnyCodeExpr"
StdReal.exp_21::D !a_0::D = error "no AnyCodeExpr"
StdReal.sqrt_22::D !a_0::D = error "no AnyCodeExpr"
StdReal.sin_23::D !a_0::D = error "no AnyCodeExpr"
StdReal.cos_24::D !a_0::D = error "no AnyCodeExpr"
StdReal.tan_25::D !a_0::D = error "no AnyCodeExpr"
StdReal.asin_26::D !a_0::D = error "no AnyCodeExpr"
StdReal.acos_27::D !a_0::D = error "no AnyCodeExpr"
StdReal.atan_28::D !a_0::D = error "no AnyCodeExpr"
StdReal.sinh_29::D !x_0::D = <{StdReal.*_4}> (<{StdReal.-_2}> (StdReal.exp_21 x_0) (StdReal.exp_21 (<{StdReal.~_10}> x_0))) 0.5
StdReal.cosh_30::D !x_0::D = <{StdReal.*_4}> (<{StdReal.+_1}> (StdReal.exp_21 x_0) (StdReal.exp_21 (<{StdReal.~_10}> x_0))) 0.5
StdReal.tanh_31::D !x_0::D = let expx_1_0::D = StdReal.exp_21 x_0, expmx_1_1::D = StdReal.exp_21 (<{StdReal.~_10}> x_0) in <{StdReal./_5}> (<{StdReal.-_2}> expx_1_0 expmx_1_1) (<{StdReal.+_1}> expx_1_0 expmx_1_1)
StdReal.asinh_32::D !x_0::D = StdReal.ln_19 (<{StdReal.+_1}> x_0 (StdReal.sqrt_22 (<{StdReal.+_1}> (<{StdReal.*_4}> x_0 x_0) 1.0)))
StdReal.acosh_33::D !x_0::D = StdReal.ln_19 (<{StdReal.+_1}> x_0 (StdReal.sqrt_22 (<{StdReal.-_2}> (<{StdReal.*_4}> x_0 x_0) 1.0)))
StdReal.atanh_34::D !x_0::D = <{StdReal.*_4}> (StdReal.ln_19 (<{StdReal./_5}> (<{StdReal.+_1}> 1.0 x_0) (<{StdReal.-_2}> 1.0 x_0))) 0.5


|| Converted Records
