|| ?module? System.File


System.File.readAcc_15 !file_0 !acc_1 = let _x_1_0 = StdFile.freads file_0 1024, file_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = StdFile.ferror file_1_1 in case (select _x_1_2::_Tuple2 0) (True -> <{_Tuple2!3}> (Data.Error.Error System.File.IOError) (select _x_1_2::_Tuple2 1)) (False -> let file_3_0 = select _x_1_2::_Tuple2 1, _x_3_1 = StdFile.fend file_3_0 in case (select _x_3_1::_Tuple2 0) (True -> <{_Tuple2!3}> (Data.Error.Ok (_predefined._Cons (select _x_1_0::_Tuple2 0) acc_1)) (select _x_3_1::_Tuple2 1)) (False -> System.File.readAcc_15 (select _x_3_1::_Tuple2 1) (_predefined._Cons (select _x_1_0::_Tuple2 0) acc_1)) ) 
System.File.readAll !file_0 = let _x_1_0 = System.File.readAcc_15 file_0 _predefined._Nil, file_1_1 = select _x_1_0::_Tuple2 1 in <{System.File._c;76;3_19}> (select _x_1_0::_Tuple2 0) file_1_1
<{System.File._c;76;3_19}> !_x_0 !file_1 = case _x_0 (Data.Error.Error e_1_0 -> <{_Tuple2!3}> (Data.Error.Error e_1_0) file_1) (Data.Error.Ok contents_1_0 -> <{_Tuple2!3}> (Data.Error.Ok (Text.concat_1 (StdList.reverse contents_1_0))) file_1) 
System.File.withFile !_vFileSystem_0 !filename_1 filemode_2::I operation_3 !env_4 = let _x_1_0 = select _vFileSystem_0::<{StdFile.FileSystem;}> 1 filename_1 filemode_2 env_4 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> (Data.Error.Error System.File.CannotOpen) (select _x_1_0::_Tuple3 2)) (False -> let file_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = operation_3 file_3_0, result_3_2 = select _x_3_1::_Tuple2 0 in case (Data.Error.isError result_3_2) (True -> <{_Tuple2!3}> result_3_2 (select _x_1_0::_Tuple3 2)) (False -> let file_5_0 = select _x_3_1::_Tuple2 1, env_5_1 = select _x_1_0::_Tuple3 2, _x_5_2 = select _vFileSystem_0::<{StdFile.FileSystem;}> 0 file_5_0 env_5_1 in case (StdBool.not (select _x_5_2::_Tuple2 0)) (True -> <{_Tuple2!3}> (Data.Error.Error System.File.CannotClose) (select _x_5_2::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok (Data.Error.fromOk result_3_2)) (select _x_5_2::_Tuple2 1)) ) ) 
System.File.readFile !_vFileSystem_0 !filename_1 !env_2 = System.File.withFile _vFileSystem_0 filename_1 3 System.File.readAll env_2
System.File.rec_14 !file_0 acc_1 = let _x_1_0 = StdFile.freadline file_0, file_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = StdFile.ferror file_1_1 in case (select _x_1_2::_Tuple2 0) (True -> <{_Tuple2!1}> (Data.Error.Error System.File.IOError) (select _x_1_2::_Tuple2 1)) (False -> let string_3_0 = select _x_1_0::_Tuple2 0 in case (<{StdString.==_2}> string_3_0 "") (True -> <{_Tuple2!1}> (Data.Error.Ok acc_1) (select _x_1_2::_Tuple2 1)) (False -> System.File.rec_14 (select _x_1_2::_Tuple2 1) (_predefined._Cons string_3_0 acc_1)) ) 
System.File.readAllLines !file_0 = let _x_1_0 = System.File.rec_14 file_0 _predefined._Nil, file_1_1 = select _x_1_0::_Tuple2 1 in <{System.File._c;61;3_20}> (select _x_1_0::_Tuple2 0) file_1_1
<{System.File._c;61;3_20}> !_x_0 !file_1 = case _x_0 (Data.Error.Error e_1_0 -> <{_Tuple2!3}> (Data.Error.Error e_1_0) file_1) (Data.Error.Ok lines_1_0 -> <{_Tuple2!3}> (Data.Error.Ok lines_1_0) file_1) 
System.File.readFileLines !_vFileSystem_0 !filename_1 !env_2 = System.File.withFile _vFileSystem_0 filename_1 3 System.File.readAllLines env_2
System.File.anon_16 contents_0 file_1 = _Tuple2 (Data.Error.Ok _predefined._Unit) (StdFile.fwrites contents_0 file_1)
System.File.writeFile !_vFileSystem_0 !filename_1 !contents_2 !env_3 = System.File.withFile _vFileSystem_0 filename_1 4 (System.File.anon_16 contents_2) env_3
System.File.fileExists !filename_0 !world_1 = let win32FindData_1_0::I = _SystemArray.createArray_17 320 '\0', _x_1_1 = System._WinBase.findFirstFileA (System._Pointer.packString filename_0) win32FindData_1_0 world_1, handle_1_2 = select _x_1_1::_Tuple2 0 in case (<{StdInt.==_16}> handle_1_2 -1) (True -> <{_Tuple2!3}> False (select _x_1_1::_Tuple2 1)) (False -> <{_Tuple2!3}> True (select (System._WinBase.findClose handle_1_2 (select _x_1_1::_Tuple2 1))::_Tuple2 1)) 
System.File.deleteFile !filename_0 !world_1 = let _x_1_0 = System._WinBase.deleteFileA (System._Pointer.packString filename_0) world_1 in case (<{StdInt.==_16}> (select _x_1_0::_Tuple2 0) 0) (True -> System.OSError.getLastOSError (select _x_1_0::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok _predefined._Unit) (select _x_1_0::_Tuple2 1)) 
System.File.filetimeToTm !filetime_0 !world_1 = let systemtime_1_0::B = _SystemArray.createArray_17 16 '\0', _x_1_1 = System._WinBase.fileTimeToSystemTime filetime_0 systemtime_1_0 world_1, ok_1_2 = select _x_1_1::_Tuple2 0 in case (StdBool.not (<{StdBool.==_3}> ok_1_2 ok_1_2)) (True -> StdMisc.undef) (False -> case (StdBool.not ok_1_2) (True -> System.OSError.getLastOSError (select _x_1_1::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok (System.Time._Tm (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 12)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 (<{StdInt.+_6}> 12 1))) 8)) (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 10)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 (<{StdInt.+_6}> 10 1))) 8)) (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 8)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 (<{StdInt.+_6}> 8 1))) 8)) (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 6)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 (<{StdInt.+_6}> 6 1))) 8)) (<{StdInt.-_7}> (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 2)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 (<{StdInt.+_6}> 2 1))) 8)) 1) (<{StdInt.-_7}> (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 0)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 (<{StdInt.+_6}> 0 1))) 8)) 1900) (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 4)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 systemtime_1_0 (<{StdInt.+_6}> 4 1))) 8)) -1 0)) (select _x_1_1::_Tuple2 1)) ) 
System.File.toDWORD_17::I !s_0 = StdInt.bitor (StdInt.bitor (StdInt.bitor (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 s_0 3)) 24) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 s_0 2)) 16)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 s_0 1)) 8)) (StdInt.toInt_20 (_SystemArray.select_19 s_0 0))
System.File.getFileInfo !filename_0 !world_1 = let win32FindData_1_0 = _SystemArray.createArray_17 320 '\0', _x_1_1 = System._WinBase.findFirstFileA (System._Pointer.packString filename_0) win32FindData_1_0 world_1 in case (<{StdInt.==_16}> (select _x_1_1::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_1_1::_Tuple2 1)) (False -> let world_3_0 = select _x_1_1::_Tuple2 1, _x_3_1 = System.File.filetimeToTm (<{StdString.%_10}> win32FindData_1_0 (_Tuple2 4 (<{StdInt.+_6}> 4 8))) world_3_0, res_3_2 = select _x_3_1::_Tuple2 0 in case (Data.Error.isError res_3_2) (True -> <{_Tuple2!3}> (Data.Error.liftError res_3_2) (select _x_3_1::_Tuple2 1)) (False -> let world_5_0 = select _x_3_1::_Tuple2 1, _x_5_1 = System.File.filetimeToTm (<{StdString.%_10}> win32FindData_1_0 (_Tuple2 20 (<{StdInt.+_6}> 20 8))) world_5_0, res_5_2 = select _x_5_1::_Tuple2 0 in case (Data.Error.isError res_5_2) (True -> <{_Tuple2!3}> (Data.Error.liftError res_5_2) (select _x_5_1::_Tuple2 1)) (False -> let world_7_0 = select _x_5_1::_Tuple2 1, _x_7_1 = System.File.filetimeToTm (<{StdString.%_10}> win32FindData_1_0 (_Tuple2 12 (<{StdInt.+_6}> 12 8))) world_7_0, res_7_2 = select _x_7_1::_Tuple2 0 in case (Data.Error.isError res_7_2) (True -> <{_Tuple2!3}> (Data.Error.liftError res_7_2) (select _x_7_1::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok (System.File._FileInfo (<{StdInt.<_17}> 0 (StdInt.bitand (System.File.toDWORD_17 win32FindData_1_0) 16)) (Data.Error.fromOk res_3_2) (Data.Error.fromOk res_5_2) (Data.Error.fromOk res_7_2) 0 (_SystemArray.size_20 (<{StdString.%_10}> win32FindData_1_0 (_Tuple2 4 (<{StdInt.+_6}> 4 8)))))) (select _x_7_1::_Tuple2 1)) ) ) ) 
System.File.moveFile !oldpath_0 !newpath_1 !world_2 = let _x_1_0 = System._WinBase.moveFileA (System._Pointer.packString oldpath_0) (System._Pointer.packString newpath_1) world_2 in case (select _x_1_0::_Tuple2 0) (True -> <{_Tuple2!3}> (Data.Error.Ok _predefined._Unit) (select _x_1_0::_Tuple2 1)) (False -> System.OSError.getLastOSError (select _x_1_0::_Tuple2 1)) 
System.File.toString_10 !_x_0 = case _x_0 (System.File.CannotOpen -> "Cannot open") (System.File.CannotClose -> "Cannot close") (System.File.IOError -> "I/O error") 
<{System.File.TD;FileError}> _x_0::B = _predefined._Nil
<{System.File.TD;FileInfo}> _x_0::B = _predefined._Nil

:: System.File.FileError = System.File.CannotOpen | System.File.CannotClose | System.File.IOError

|| Converted Records
:: System.File._FileInfo = {!System.File.directory::B, !System.File.creationTime, !System.File.lastModifiedTime, !System.File.lastAccessedTime, !System.File.sizeHigh::I, !System.File.sizeLow::I}

