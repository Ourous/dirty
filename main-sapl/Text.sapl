|| ?module? Text


<{Text.+_21}> !s1_0 !s2_1 = <{StdString.+++_11}> s1_0 s2_1
<{Text.<+}> !_vtoString_0 !_vtoString_1 x_2 y_3 = <{Text.+_21}> (select _vtoString_0::<{StdOverloaded.toString;}> 0 x_2) (select _vtoString_1::<{StdOverloaded.toString;}> 0 y_3)
Text.foldl_38 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Text.foldl_38 op_0 (op_0 r_1 a_1_0) x_1_1) 
Text.anon_23::I !_vArray_0 !s_1::I a_2 = <{StdInt.+_6}> s_1 (select _vArray_0::<{_SystemArray.Array;}> 4 a_2)
Text.copyChars_25 !offset_0::I !i_1::I !num_2::I !src_3 !dst_4 = case (<{StdInt.==_16}> i_1 num_2) (True -> dst_4) (False -> Text.copyChars_25 offset_0 (<{StdInt.+_6}> i_1 StdInt.one_11) num_2 src_3 (_SystemArray.update_21 dst_4 (<{StdInt.+_6}> offset_0 i_1) (_SystemArray.select_19 src_3 i_1))) 
<{Text.concat`_24}> !_x_0 !dst_1 !_x_2::I = case _x_0 (_predefined._Nil -> dst_1) (_predefined._Cons x_1_0 xs_1_1 -> <{Text.concat`_24}> xs_1_1 (Text.copyChars_25 _x_2 0 (_SystemArray.size_20 x_1_0) x_1_0 dst_1) (<{StdInt.+_6}> _x_2 (_SystemArray.size_20 x_1_0))) 
Text.anon_39::I !s_0::I !a_1 = <{StdInt.+_6}> s_0 (_SystemArray.size_20 a_1)
Text.foldl_40::I !r_0::I !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> Text.foldl_40 (Text.anon_39 r_0 a_1_0) x_1_1) 
Text.concat_1 !xs_0 = <{Text.concat`_24}> xs_0 (_SystemArray.createArray_17 (Text.foldl_40 0 xs_0) '\0') 0
Text.dropChars_2 !n_0::I !s_1 = <{StdString.%_10}> s_1 (_Tuple2 n_0 (<{StdInt.-_7}> (<{StdInt.-_7}> (<{StdInt.+_6}> n_0 (_SystemArray.size_20 s_1)) n_0) 1))
Text.endsWith_3::B !needle_0 !haystack_1 = let !s_needle_1_0::I = _SystemArray.size_20 needle_0, !s_haystack_1_1::I = _SystemArray.size_20 haystack_1 in case (StdBool.not (<{StdInt.<_17}> s_haystack_1_1 s_needle_1_0)) (True -> <{StdString.==_2}> needle_0 (<{StdString.%_10}> haystack_1 (_Tuple2 (<{StdInt.-_7}> s_haystack_1_1 s_needle_1_0) (<{StdInt.-_7}> s_haystack_1_1 1)))) (False -> False) 
Text.equalStringOrIndexOfNext_31::I !i_0::I !offs_1::I !max_offs_2::I !needle_3 !haystack_4 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 needle_3)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 needle_3 i_0) (_SystemArray.select_19 haystack_4 (<{StdInt.+_6}> i_0 offs_1))) (True -> Text.equalStringOrIndexOfNext_31 (<{StdInt.+_6}> i_0 1) offs_1 max_offs_2 needle_3 haystack_4) (False -> <{Text.indexOf`_30}> (<{StdInt.+_6}> offs_1 1) (_SystemArray.select_19 needle_3 0) max_offs_2 needle_3 haystack_4) ) (False -> offs_1) 
<{Text.indexOf`_30}>::I !offs_0::I !needleChar0_1::C !max_offs_2::I !needle_3 !haystack_4 = case (StdBool.not (<{StdInt.<_17}> max_offs_2 offs_0)) (True -> case (StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 haystack_4 offs_0) needleChar0_1)) (True -> <{Text.indexOf`_30}> (<{StdInt.+_6}> offs_0 1) needleChar0_1 max_offs_2 needle_3 haystack_4) (False -> Text.equalStringOrIndexOfNext_31 1 offs_0 max_offs_2 needle_3 haystack_4) ) (False -> -1) 
Text.indexOfAfter_5::I !offs_0::I !needle_1 !haystack_2 = case (<{StdInt.==_16}> (_SystemArray.size_20 needle_1) 0) (True -> -1) (False -> <{Text.indexOf`_30}> offs_0 (_SystemArray.select_19 needle_1 0) (<{StdInt.-_7}> (_SystemArray.size_20 haystack_2) (_SystemArray.size_20 needle_1)) needle_1 haystack_2) 
Text.indexOf_4::I !needle_0 !haystack_1 = Text.indexOfAfter_5 0 needle_0 haystack_1
<{Text.join`_27}> !sep_0 !_x_1 = case _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> _predefined._Cons x_1_0 _predefined._Nil) (_ -> _predefined._Cons x_1_0 (_predefined._Cons sep_0 (<{Text.join`_27}> sep_0 _x_1_1)))) 
Text.join_6 !sep_0 !xs_1 = Text.concat_1 (<{Text.join`_27}> sep_0 xs_1)
Text.equalStringOrIndexOfPrevious_29::I !i_0::I !offs_1::I !needle_2 !haystack_3 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 needle_2)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 needle_2 i_0) (_SystemArray.select_19 haystack_3 (<{StdInt.+_6}> i_0 offs_1))) (True -> Text.equalStringOrIndexOfPrevious_29 (<{StdInt.+_6}> i_0 1) offs_1 needle_2 haystack_3) (False -> <{Text.lastIndexOf`_28}> (<{StdInt.-_7}> offs_1 1) (_SystemArray.select_19 needle_2 0) needle_2 haystack_3) ) (False -> offs_1) 
<{Text.lastIndexOf`_28}>::I !offs_0::I !needleChar0_1::C !needle_2 !haystack_3 = case (StdBool.not (<{StdInt.<_17}> offs_0 0)) (True -> case (StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 haystack_3 offs_0) needleChar0_1)) (True -> <{Text.lastIndexOf`_28}> (<{StdInt.-_7}> offs_0 1) needleChar0_1 needle_2 haystack_3) (False -> Text.equalStringOrIndexOfPrevious_29 1 offs_0 needle_2 haystack_3) ) (False -> -1) 
Text.lastIndexOf_7::I !needle_0 !haystack_1 = case (<{StdInt.==_16}> (_SystemArray.size_20 needle_0) 0) (True -> -1) (False -> <{Text.lastIndexOf`_28}> (<{StdInt.-_7}> (_SystemArray.size_20 haystack_1) (_SystemArray.size_20 needle_0)) (_SystemArray.select_19 needle_0 0) needle_0 haystack_1) 
<{Text.cu;142;49_34}> !_vArray_0 !_vArray_1 c_2 s_3 boundary_4::I c_a_5 !c_i_6::I !g_s_7::I = case (StdBool.not (<{StdInt.<_17}> g_s_7 c_i_6)) (True -> <{Text.cu;142;49_34}> _vArray_0 _vArray_1 c_2 s_3 boundary_4 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_5 c_i_6 (<{Text._if;142;12_51}> (<{StdInt.<_17}> c_i_6 boundary_4) c_2 s_3 c_i_6 boundary_4 _vArray_0)) (<{StdInt.+_6}> c_i_6 StdInt.one_11) g_s_7) (False -> c_a_5) 
<{Text._if;142;12_51}> !_x_0::B c_1 s_2 c_i_3::I boundary_4::I _vArray_5 = case _x_0 (True -> c_1) (_ -> select _vArray_5::<{_SystemArray.Array;}> 3 s_2 (<{StdInt.-_7}> c_i_3 boundary_4))
<{Text.cu;142;49_41}> !_vArray_0 c_1::C s_2 boundary_3::I c_a_4 !c_i_5::I !g_s_6::I = case (StdBool.not (<{StdInt.<_17}> g_s_6 c_i_5)) (True -> <{Text.cu;142;49_41}> _vArray_0 c_1 s_2 boundary_3 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_4 c_i_5 (<{Text._if;142;12_52}> (<{StdInt.<_17}> c_i_5 boundary_3) c_1 s_2 c_i_5 boundary_3)) (<{StdInt.+_6}> c_i_5 StdInt.one_11) g_s_6) (False -> c_a_4) 
<{Text._if;142;12_52}>::C !_x_0::B c_1::C s_2 c_i_3::I boundary_4::I = case _x_0 (True -> c_1) (_ -> _SystemArray.select_19 s_2 (<{StdInt.-_7}> c_i_3 boundary_4))
<{Text.cu;142;49_42}> c_0::C s_1 boundary_2::I !c_a_3 !c_i_4::I !g_s_5::I = case (StdBool.not (<{StdInt.<_17}> g_s_5 c_i_4)) (True -> <{Text.cu;142;49_42}> c_0 s_1 boundary_2 (_SystemArray.update_21 c_a_3 c_i_4 (<{Text._if;142;12_53}> (<{StdInt.<_17}> c_i_4 boundary_2) c_0 s_1 c_i_4 boundary_2)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_s_5) (False -> c_a_3) 
<{Text._if;142;12_53}>::C !_x_0::B c_1::C s_2 c_i_3::I boundary_4::I = case _x_0 (True -> c_1) (_ -> _SystemArray.select_19 s_2 (<{StdInt.-_7}> c_i_3 boundary_4))
Text.lpad_8 !s_0 !w_1::I !c_2::C = let !boundary_1_0::I = <{StdInt.-_7}> w_1 (_SystemArray.size_20 s_0), g_s_1_1::I = <{StdInt.-_7}> w_1 1 in <{Text.cu;142;49_42}> c_2 s_0 boundary_1_0 (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s_1_1 StdInt.one_11)) 0 g_s_1_1
Text.non_space_left_32::I !_vArray_0 s_1 !size_s_2::I !i_3::I = case (case (<{StdInt.<_17}> i_3 size_s_2) (True -> StdChar.isSpace (select _vArray_0::<{_SystemArray.Array;}> 3 s_1 i_3)) (False -> False) ) (True -> Text.non_space_left_32 _vArray_0 s_1 size_s_2 (<{StdInt.+_6}> i_3 1)) (False -> i_3) 
Text.non_space_left_43::I s_0 !size_s_1::I !i_2::I = case (case (<{StdInt.<_17}> i_2 size_s_1) (True -> StdChar.isSpace (_SystemArray.select_19 s_0 i_2)) (False -> False) ) (True -> Text.non_space_left_43 s_0 size_s_1 (<{StdInt.+_6}> i_2 1)) (False -> i_2) 
Text.ltrim_9 !s_0 = let !non_space_index_1_0::I = Text.non_space_left_43 s_0 size_s_1_1 0, size_s_1_1::I = _SystemArray.size_20 s_0 in case (<{StdInt.==_16}> non_space_index_1_0 0) (True -> s_0) (False -> <{StdString.%_10}> s_0 (_Tuple2 non_space_index_1_0 (<{StdInt.-_7}> size_s_1_1 1))) 
Text.subString_15 !start_0::I !len_1::I !haystack_2 = <{StdString.%_10}> haystack_2 (_Tuple2 start_0 (<{StdInt.-_7}> (<{StdInt.+_6}> start_0 len_1) 1))
Text.replaceSubString_10 !needle_0 !replacement_1 !haystack_2 = let !index_1_0::I = Text.indexOf_4 needle_0 haystack_2 in case (<{StdInt.==_16}> index_1_0 -1) (True -> haystack_2) (False -> let !start_3_0 = Text.subString_15 0 index_1_0 haystack_2, !end_3_1 = Text.subString_15 (<{StdInt.+_6}> index_1_0 (_SystemArray.size_20 needle_0)) (_SystemArray.size_20 haystack_2) haystack_2 in <{StdString.+++_11}> start_3_0 (<{StdString.+++_11}> replacement_1 (Text.replaceSubString_10 needle_0 replacement_1 end_3_1))) 
<{Text.cu;147;38_35}> !_vArray_0 !_vArray_1 s_2 c_3 boundary_4::I c_a_5 !c_i_6::I !g_s_7::I = case (StdBool.not (<{StdInt.<_17}> g_s_7 c_i_6)) (True -> <{Text.cu;147;38_35}> _vArray_0 _vArray_1 s_2 c_3 boundary_4 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_5 c_i_6 (<{Text._if;147;12_54}> (<{StdInt.<_17}> c_i_6 boundary_4) s_2 c_i_6 _vArray_0 c_3)) (<{StdInt.+_6}> c_i_6 StdInt.one_11) g_s_7) (False -> c_a_5) 
<{Text._if;147;12_54}> !_x_0::B s_1 c_i_2::I _vArray_3 c_4 = case _x_0 (True -> select _vArray_3::<{_SystemArray.Array;}> 3 s_1 c_i_2) (_ -> c_4)
<{Text.cu;147;38_44}> !_vArray_0 s_1 c_2::C boundary_3::I c_a_4 !c_i_5::I !g_s_6::I = case (StdBool.not (<{StdInt.<_17}> g_s_6 c_i_5)) (True -> <{Text.cu;147;38_44}> _vArray_0 s_1 c_2 boundary_3 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_4 c_i_5 (<{Text._if;147;12_55}> (<{StdInt.<_17}> c_i_5 boundary_3) s_1 c_i_5 c_2)) (<{StdInt.+_6}> c_i_5 StdInt.one_11) g_s_6) (False -> c_a_4) 
<{Text._if;147;12_55}>::C !_x_0::B s_1 c_i_2::I c_3::C = case _x_0 (True -> _SystemArray.select_19 s_1 c_i_2) (_ -> c_3)
<{Text.cu;147;38_45}> s_0 c_1::C boundary_2::I !c_a_3 !c_i_4::I !g_s_5::I = case (StdBool.not (<{StdInt.<_17}> g_s_5 c_i_4)) (True -> <{Text.cu;147;38_45}> s_0 c_1 boundary_2 (_SystemArray.update_21 c_a_3 c_i_4 (<{Text._if;147;12_56}> (<{StdInt.<_17}> c_i_4 boundary_2) s_0 c_i_4 c_1)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_s_5) (False -> c_a_3) 
<{Text._if;147;12_56}>::C !_x_0::B s_1 c_i_2::I c_3::C = case _x_0 (True -> _SystemArray.select_19 s_1 c_i_2) (_ -> c_3)
Text.rpad_11 !s_0 !w_1::I !c_2::C = let !boundary_1_0::I = _SystemArray.size_20 s_0, g_s_1_1::I = <{StdInt.-_7}> w_1 1 in <{Text.cu;147;38_45}> s_0 c_2 boundary_1_0 (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s_1_1 StdInt.one_11)) 0 g_s_1_1
Text.non_space_right_33::I !_vArray_0 s_1 !i_2::I = case (case (StdBool.not (<{StdInt.<_17}> i_2 0)) (True -> StdChar.isSpace (select _vArray_0::<{_SystemArray.Array;}> 3 s_1 i_2)) (False -> False) ) (True -> Text.non_space_right_33 _vArray_0 s_1 (<{StdInt.-_7}> i_2 1)) (False -> i_2) 
Text.non_space_right_46::I s_0 !i_1::I = case (case (StdBool.not (<{StdInt.<_17}> i_1 0)) (True -> StdChar.isSpace (_SystemArray.select_19 s_0 i_1)) (False -> False) ) (True -> Text.non_space_right_46 s_0 (<{StdInt.-_7}> i_1 1)) (False -> i_1) 
Text.rtrim_12 !s_0 = let !non_space_index_1_0::I = Text.non_space_right_46 s_0 (<{StdInt.-_7}> size_s_1_1 1), size_s_1_1::I = _SystemArray.size_20 s_0 in case (<{StdInt.==_16}> non_space_index_1_0 (<{StdInt.-_7}> size_s_1_1 1)) (True -> s_0) (False -> <{StdString.%_10}> s_0 (_Tuple2 0 non_space_index_1_0)) 
Text.splitAfter_26 !offs_0::I !end_1::I !sep_2 !s_3 = let index_1_0::I = Text.indexOfAfter_5 offs_0 sep_2 s_3 in case (<{StdInt.==_16}> index_1_0 -1) (True -> _predefined._Cons (<{StdString.%_10}> s_3 (_Tuple2 offs_0 end_1)) _predefined._Nil) (False -> _predefined._Cons (<{StdString.%_10}> s_3 (_Tuple2 offs_0 (<{StdInt.-_7}> index_1_0 1))) (Text.splitAfter_26 (<{StdInt.+_6}> index_1_0 (_SystemArray.size_20 sep_2)) end_1 sep_2 s_3)) 
Text.split_13 !sep_0 !s_1 = Text.splitAfter_26 0 (<{StdInt.-_7}> (_SystemArray.size_20 s_1) 1) sep_0 s_1
Text.startsWith_14::B !needle_0 !haystack_1 = let !s_needle_1_0::I = _SystemArray.size_20 needle_0 in case (StdBool.not (<{StdInt.<_17}> (_SystemArray.size_20 haystack_1) s_needle_1_0)) (True -> <{StdString.==_2}> needle_0 (<{StdString.%_10}> haystack_1 (_Tuple2 0 (<{StdInt.-_7}> s_needle_1_0 1)))) (False -> False) 
Text.textSize_16::I !s_0 = _SystemArray.size_20 s_0
<{Text.cu;150;32_36}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3 in <{Text.cu;150;32_36}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (StdChar.toLower (select _x_2_1::_Tuple2 0))) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{Text.cu;150;32_47}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_4 c_i_2 in <{Text.cu;150;32_47}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (StdChar.toLower (select _x_2_1::_Tuple2 0))) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{Text.cu;150;32_48}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_3 c_i_1 in <{Text.cu;150;32_48}> (_SystemArray.update_21 c_a_0 c_i_1 (StdChar.toLower (select _x_2_1::_Tuple2 0))) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
Text.toLowerCase_17 !s_0 = let _x_1_0::I = _SystemArray.usize_23 s_0, g_s2_1_1 = <{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1 in <{Text.cu;150;32_48}> (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s2_1_1 StdInt.one_11)) 0 g_s2_1_1 (select _x_1_0::_Tuple2 1)
<{Text.cu;153;32_37}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3 in <{Text.cu;153;32_37}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (StdChar.toUpper (select _x_2_1::_Tuple2 0))) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{Text.cu;153;32_49}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_4 c_i_2 in <{Text.cu;153;32_49}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (StdChar.toUpper (select _x_2_1::_Tuple2 0))) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{Text.cu;153;32_50}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_3 c_i_1 in <{Text.cu;153;32_50}> (_SystemArray.update_21 c_a_0 c_i_1 (StdChar.toUpper (select _x_2_1::_Tuple2 0))) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
Text.toUpperCase_18 !s_0 = let _x_1_0::I = _SystemArray.usize_23 s_0, g_s2_1_1 = <{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1 in <{Text.cu;153;32_50}> (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s2_1_1 StdInt.one_11)) 0 g_s2_1_1 (select _x_1_0::_Tuple2 1)
Text.trim_19 !s_0 = Text.ltrim_9 (Text.rtrim_12 s_0)
Text.upperCaseFirst_20 !_x_0 = case _x_0 ("" -> "") (_ -> <{StdString.:=}> _x_0 (_Tuple2 0 (StdChar.toUpper (_SystemArray.select_19 _x_0 0))))
<{Text.TD;Text;}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{Text.Text;}> = {!Text.concat, !Text.dropChars, !Text.endsWith, !Text.indexOf, !Text.indexOfAfter, !Text.join, !Text.lastIndexOf, !Text.lpad, !Text.ltrim, !Text.replaceSubString, !Text.rpad, !Text.rtrim, !Text.split, !Text.startsWith, !Text.subString, !Text.textSize, !Text.toLowerCase, !Text.toUpperCase, !Text.trim, !Text.upperCaseFirst}

